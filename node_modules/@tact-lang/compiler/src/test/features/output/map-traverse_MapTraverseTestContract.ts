import { 
    Cell,
    Slice, 
    Address, 
    Builder, 
    beginCell, 
    ComputeError, 
    TupleItem, 
    TupleReader, 
    Dictionary, 
    contractAddress, 
    ContractProvider, 
    Sender, 
    Contract, 
    ContractABI, 
    ABIType,
    ABIGetter,
    ABIReceiver,
    TupleBuilder,
    DictionaryValue
} from '@ton/core';

export type StateInit = {
    $$type: 'StateInit';
    code: Cell;
    data: Cell;
}

export function storeStateInit(src: StateInit) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}

export function loadStateInit(slice: Slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function loadTupleStateInit(source: TupleReader) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function storeTupleStateInit(source: StateInit) {
    let builder = new TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserStateInit(): DictionaryValue<StateInit> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    }
}

export type Context = {
    $$type: 'Context';
    bounced: boolean;
    sender: Address;
    value: bigint;
    raw: Cell;
}

export function storeContext(src: Context) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}

export function loadContext(slice: Slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function loadTupleContext(source: TupleReader) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function storeTupleContext(source: Context) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}

function dictValueParserContext(): DictionaryValue<Context> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    }
}

export type SendParameters = {
    $$type: 'SendParameters';
    bounce: boolean;
    to: Address;
    value: bigint;
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
}

export function storeSendParameters(src: SendParameters) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }
        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }
        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }
    };
}

export function loadSendParameters(slice: Slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function loadTupleSendParameters(source: TupleReader) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function storeTupleSendParameters(source: SendParameters) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserSendParameters(): DictionaryValue<SendParameters> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    }
}

export type MyStruct = {
    $$type: 'MyStruct';
    a: bigint;
    b: boolean;
}

export function storeMyStruct(src: MyStruct) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeInt(src.a, 257);
        b_0.storeBit(src.b);
    };
}

export function loadMyStruct(slice: Slice) {
    let sc_0 = slice;
    let _a = sc_0.loadIntBig(257);
    let _b = sc_0.loadBit();
    return { $$type: 'MyStruct' as const, a: _a, b: _b };
}

function loadTupleMyStruct(source: TupleReader) {
    let _a = source.readBigNumber();
    let _b = source.readBoolean();
    return { $$type: 'MyStruct' as const, a: _a, b: _b };
}

function storeTupleMyStruct(source: MyStruct) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.a);
    builder.writeBoolean(source.b);
    return builder.build();
}

function dictValueParserMyStruct(): DictionaryValue<MyStruct> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeMyStruct(src)).endCell());
        },
        parse: (src) => {
            return loadMyStruct(src.loadRef().beginParse());
        }
    }
}

 type MapTraverseTestContract_init_args = {
    $$type: 'MapTraverseTestContract_init_args';
}

function initMapTraverseTestContract_init_args(src: MapTraverseTestContract_init_args) {
    return (builder: Builder) => {
        let b_0 = builder;
    };
}

async function MapTraverseTestContract_init() {
    const __code = Cell.fromBase64('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');
    const __system = Cell.fromBase64('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');
    let builder = beginCell();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initMapTraverseTestContract_init_args({ $$type: 'MapTraverseTestContract_init_args' })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}

const MapTraverseTestContract_errors: { [key: number]: { message: string } } = {
    2: { message: `Stack undeflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
    137: { message: `Masterchain support is not enabled for this contract` },
}

const MapTraverseTestContract_types: ABIType[] = [
    {"name":"StateInit","header":null,"fields":[{"name":"code","type":{"kind":"simple","type":"cell","optional":false}},{"name":"data","type":{"kind":"simple","type":"cell","optional":false}}]},
    {"name":"Context","header":null,"fields":[{"name":"bounced","type":{"kind":"simple","type":"bool","optional":false}},{"name":"sender","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"raw","type":{"kind":"simple","type":"slice","optional":false}}]},
    {"name":"SendParameters","header":null,"fields":[{"name":"bounce","type":{"kind":"simple","type":"bool","optional":false}},{"name":"to","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mode","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"body","type":{"kind":"simple","type":"cell","optional":true}},{"name":"code","type":{"kind":"simple","type":"cell","optional":true}},{"name":"data","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"MyStruct","header":null,"fields":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"bool","optional":false}}]},
]

const MapTraverseTestContract_getters: ABIGetter[] = [
    {"name":"test_int_int","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_int_bool","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_int_cell","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_int_address","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_int_struct","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_address_int","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_address_bool","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_address_cell","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_address_address","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_address_struct","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_empty_map","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_null","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_map_modification_during_traversal1","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"test_map_modification_during_traversal2","arguments":[],"returnType":null},
    {"name":"test_map_size","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
]

const MapTraverseTestContract_receivers: ABIReceiver[] = [
    {"receiver":"internal","message":{"kind":"empty"}},
]

export class MapTraverseTestContract implements Contract {
    
    static async init() {
        return await MapTraverseTestContract_init();
    }
    
    static async fromInit() {
        const init = await MapTraverseTestContract_init();
        const address = contractAddress(0, init);
        return new MapTraverseTestContract(address, init);
    }
    
    static fromAddress(address: Address) {
        return new MapTraverseTestContract(address);
    }
    
    readonly address: Address; 
    readonly init?: { code: Cell, data: Cell };
    readonly abi: ContractABI = {
        types:  MapTraverseTestContract_types,
        getters: MapTraverseTestContract_getters,
        receivers: MapTraverseTestContract_receivers,
        errors: MapTraverseTestContract_errors,
    };
    
    private constructor(address: Address, init?: { code: Cell, data: Cell }) {
        this.address = address;
        this.init = init;
    }
    
    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: null) {
        
        let body: Cell | null = null;
        if (message === null) {
            body = new Cell();
        }
        if (body === null) { throw new Error('Invalid message type'); }
        
        await provider.internal(via, { ...args, body: body });
        
    }
    
    async getTestIntInt(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_int_int', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestIntBool(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_int_bool', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestIntCell(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_int_cell', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestIntAddress(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_int_address', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestIntStruct(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_int_struct', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestAddressInt(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_address_int', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestAddressBool(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_address_bool', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestAddressCell(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_address_cell', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestAddressAddress(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_address_address', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestAddressStruct(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_address_struct', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestEmptyMap(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_empty_map', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestNull(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_null', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestMapModificationDuringTraversal1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_map_modification_during_traversal1', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getTestMapModificationDuringTraversal2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_map_modification_during_traversal2', builder.build())).stack;
    }
    
    async getTestMapSize(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('test_map_size', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
}