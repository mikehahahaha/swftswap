#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "ordering_B.headers.fc";
#include "ordering_B.stdlib.fc";
#include "ordering_B.storage.fc";

;;
;; Contract B functions
;;

tuple $B$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(int, int) $Int$_fun_inc(int $self) impure inline_ref {
    var ($self) = $self;
    $self = ($self + 1);
    return ($self, $self);
}

(tuple, (int, int, int)) $B$_fun_create(tuple $self, int $v) impure inline_ref {
    var ($self) = $self;
    int $v1 = $v~$Int$_fun_inc();
    int $v2 = $v~$Int$_fun_inc();
    int $v3 = $v~$Int$_fun_inc();
    return ($self, $S$_constructor_v1_v2_v3($v1, $v2, $v3));
}

;;
;; Receivers of a Contract B
;;

((tuple), ()) $B$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$B$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract B
;;

_ %create(int $$v) method_id(96687) {
    int $v = $$v;
    var self = $B$_contract_load();
    var res = self~$B$_fun_create($v);
    return $S$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qma5TCX7hwWBTiopW2NamNhWwsqY4KqEgQEbjXnVhVhmCL";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract B
;;

(tuple, int) $B$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$B$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $B$_contract_load();
    
    ;; Handle operation
    int handled = self~$B$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $B$_contract_store(self);
}
