import { 
    Cell,
    Slice, 
    Address, 
    Builder, 
    beginCell, 
    ComputeError, 
    TupleItem, 
    TupleReader, 
    Dictionary, 
    contractAddress, 
    ContractProvider, 
    Sender, 
    Contract, 
    ContractABI, 
    ABIType,
    ABIGetter,
    ABIReceiver,
    TupleBuilder,
    DictionaryValue
} from '@ton/core';

export type StateInit = {
    $$type: 'StateInit';
    code: Cell;
    data: Cell;
}

export function storeStateInit(src: StateInit) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}

export function loadStateInit(slice: Slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function loadTupleStateInit(source: TupleReader) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function storeTupleStateInit(source: StateInit) {
    let builder = new TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserStateInit(): DictionaryValue<StateInit> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    }
}

export type Context = {
    $$type: 'Context';
    bounced: boolean;
    sender: Address;
    value: bigint;
    raw: Cell;
}

export function storeContext(src: Context) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}

export function loadContext(slice: Slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function loadTupleContext(source: TupleReader) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function storeTupleContext(source: Context) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}

function dictValueParserContext(): DictionaryValue<Context> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    }
}

export type SendParameters = {
    $$type: 'SendParameters';
    bounce: boolean;
    to: Address;
    value: bigint;
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
}

export function storeSendParameters(src: SendParameters) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }
        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }
        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }
    };
}

export function loadSendParameters(slice: Slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function loadTupleSendParameters(source: TupleReader) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function storeTupleSendParameters(source: SendParameters) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserSendParameters(): DictionaryValue<SendParameters> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap1 = {
    $$type: 'SetIntMap1';
    key: bigint;
    value: bigint | null;
}

export function storeSetIntMap1(src: SetIntMap1) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1510253336, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap1(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1510253336) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetIntMap1' as const, key: _key, value: _value };
}

function loadTupleSetIntMap1(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetIntMap1' as const, key: _key, value: _value };
}

function storeTupleSetIntMap1(source: SetIntMap1) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetIntMap1(): DictionaryValue<SetIntMap1> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap1(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap1(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap2 = {
    $$type: 'SetIntMap2';
    key: bigint;
    value: boolean | null;
}

export function storeSetIntMap2(src: SetIntMap2) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1629867766, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeBit(src.value); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap2(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1629867766) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadBit() : null;
    return { $$type: 'SetIntMap2' as const, key: _key, value: _value };
}

function loadTupleSetIntMap2(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBooleanOpt();
    return { $$type: 'SetIntMap2' as const, key: _key, value: _value };
}

function storeTupleSetIntMap2(source: SetIntMap2) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeBoolean(source.value);
    return builder.build();
}

function dictValueParserSetIntMap2(): DictionaryValue<SetIntMap2> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap2(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap2(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap3 = {
    $$type: 'SetIntMap3';
    key: bigint;
    value: Cell | null;
}

export function storeSetIntMap3(src: SetIntMap3) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3613954633, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeRef(src.value); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap3(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3613954633) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SetIntMap3' as const, key: _key, value: _value };
}

function loadTupleSetIntMap3(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readCellOpt();
    return { $$type: 'SetIntMap3' as const, key: _key, value: _value };
}

function storeTupleSetIntMap3(source: SetIntMap3) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeCell(source.value);
    return builder.build();
}

function dictValueParserSetIntMap3(): DictionaryValue<SetIntMap3> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap3(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap3(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap4 = {
    $$type: 'SetIntMap4';
    key: bigint;
    value: SomeStruct | null;
}

export function storeSetIntMap4(src: SetIntMap4) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(383013829, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true); b_0.store(storeSomeStruct(src.value)); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap4(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 383013829) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? loadSomeStruct(sc_0) : null;
    return { $$type: 'SetIntMap4' as const, key: _key, value: _value };
}

function loadTupleSetIntMap4(source: TupleReader) {
    let _key = source.readBigNumber();
    const _value_p = source.readTupleOpt();
    const _value = _value_p ? loadTupleSomeStruct(_value_p) : null;
    return { $$type: 'SetIntMap4' as const, key: _key, value: _value };
}

function storeTupleSetIntMap4(source: SetIntMap4) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    if (source.value !== null && source.value !== undefined) {
        builder.writeTuple(storeTupleSomeStruct(source.value));
    } else {
        builder.writeTuple(null);
    }
    return builder.build();
}

function dictValueParserSetIntMap4(): DictionaryValue<SetIntMap4> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap4(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap4(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap5 = {
    $$type: 'SetIntMap5';
    key: bigint;
    value: Address | null;
}

export function storeSetIntMap5(src: SetIntMap5) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2809746751, 32);
        b_0.storeInt(src.key, 257);
        b_0.storeAddress(src.value);
    };
}

export function loadSetIntMap5(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2809746751) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadMaybeAddress();
    return { $$type: 'SetIntMap5' as const, key: _key, value: _value };
}

function loadTupleSetIntMap5(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readAddressOpt();
    return { $$type: 'SetIntMap5' as const, key: _key, value: _value };
}

function storeTupleSetIntMap5(source: SetIntMap5) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeAddress(source.value);
    return builder.build();
}

function dictValueParserSetIntMap5(): DictionaryValue<SetIntMap5> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap5(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap5(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap6 = {
    $$type: 'SetIntMap6';
    key: bigint;
    value: bigint | null;
}

export function storeSetIntMap6(src: SetIntMap6) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1258686922, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap6(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1258686922) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetIntMap6' as const, key: _key, value: _value };
}

function loadTupleSetIntMap6(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetIntMap6' as const, key: _key, value: _value };
}

function storeTupleSetIntMap6(source: SetIntMap6) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetIntMap6(): DictionaryValue<SetIntMap6> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap6(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap6(src.loadRef().beginParse());
        }
    }
}

export type SetUIntMap7 = {
    $$type: 'SetUIntMap7';
    key: bigint;
    value: bigint | null;
}

export function storeSetUIntMap7(src: SetUIntMap7) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3563204871, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetUIntMap7(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3563204871) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetUIntMap7' as const, key: _key, value: _value };
}

function loadTupleSetUIntMap7(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetUIntMap7' as const, key: _key, value: _value };
}

function storeTupleSetUIntMap7(source: SetUIntMap7) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetUIntMap7(): DictionaryValue<SetUIntMap7> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetUIntMap7(src)).endCell());
        },
        parse: (src) => {
            return loadSetUIntMap7(src.loadRef().beginParse());
        }
    }
}

export type SetIntMap8 = {
    $$type: 'SetIntMap8';
    key: bigint;
    value: bigint | null;
}

export function storeSetIntMap8(src: SetIntMap8) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1910615278, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetIntMap8(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1910615278) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetIntMap8' as const, key: _key, value: _value };
}

function loadTupleSetIntMap8(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetIntMap8' as const, key: _key, value: _value };
}

function storeTupleSetIntMap8(source: SetIntMap8) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetIntMap8(): DictionaryValue<SetIntMap8> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetIntMap8(src)).endCell());
        },
        parse: (src) => {
            return loadSetIntMap8(src.loadRef().beginParse());
        }
    }
}

export type SetUIntMap9 = {
    $$type: 'SetUIntMap9';
    key: bigint;
    value: bigint | null;
}

export function storeSetUIntMap9(src: SetUIntMap9) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1765685895, 32);
        b_0.storeInt(src.key, 257);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetUIntMap9(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1765685895) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetUIntMap9' as const, key: _key, value: _value };
}

function loadTupleSetUIntMap9(source: TupleReader) {
    let _key = source.readBigNumber();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetUIntMap9' as const, key: _key, value: _value };
}

function storeTupleSetUIntMap9(source: SetUIntMap9) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetUIntMap9(): DictionaryValue<SetUIntMap9> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetUIntMap9(src)).endCell());
        },
        parse: (src) => {
            return loadSetUIntMap9(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap1 = {
    $$type: 'SetAddrMap1';
    key: Address;
    value: bigint | null;
}

export function storeSetAddrMap1(src: SetAddrMap1) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1749966413, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap1(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1749966413) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetAddrMap1' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap1(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetAddrMap1' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap1(source: SetAddrMap1) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap1(): DictionaryValue<SetAddrMap1> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap1(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap1(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap2 = {
    $$type: 'SetAddrMap2';
    key: Address;
    value: boolean | null;
}

export function storeSetAddrMap2(src: SetAddrMap2) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(624157584, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeBit(src.value); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap2(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 624157584) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? sc_0.loadBit() : null;
    return { $$type: 'SetAddrMap2' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap2(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readBooleanOpt();
    return { $$type: 'SetAddrMap2' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap2(source: SetAddrMap2) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeBoolean(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap2(): DictionaryValue<SetAddrMap2> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap2(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap2(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap3 = {
    $$type: 'SetAddrMap3';
    key: Address;
    value: Cell | null;
}

export function storeSetAddrMap3(src: SetAddrMap3) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(4276365062, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeRef(src.value); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap3(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 4276365062) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SetAddrMap3' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap3(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readCellOpt();
    return { $$type: 'SetAddrMap3' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap3(source: SetAddrMap3) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeCell(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap3(): DictionaryValue<SetAddrMap3> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap3(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap3(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap4 = {
    $$type: 'SetAddrMap4';
    key: Address;
    value: SomeStruct | null;
}

export function storeSetAddrMap4(src: SetAddrMap4) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1683777913, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true); b_0.store(storeSomeStruct(src.value)); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap4(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1683777913) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? loadSomeStruct(sc_0) : null;
    return { $$type: 'SetAddrMap4' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap4(source: TupleReader) {
    let _key = source.readAddress();
    const _value_p = source.readTupleOpt();
    const _value = _value_p ? loadTupleSomeStruct(_value_p) : null;
    return { $$type: 'SetAddrMap4' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap4(source: SetAddrMap4) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    if (source.value !== null && source.value !== undefined) {
        builder.writeTuple(storeTupleSomeStruct(source.value));
    } else {
        builder.writeTuple(null);
    }
    return builder.build();
}

function dictValueParserSetAddrMap4(): DictionaryValue<SetAddrMap4> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap4(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap4(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap5 = {
    $$type: 'SetAddrMap5';
    key: Address;
    value: Address | null;
}

export function storeSetAddrMap5(src: SetAddrMap5) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1741376771, 32);
        b_0.storeAddress(src.key);
        b_0.storeAddress(src.value);
    };
}

export function loadSetAddrMap5(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1741376771) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadMaybeAddress();
    return { $$type: 'SetAddrMap5' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap5(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readAddressOpt();
    return { $$type: 'SetAddrMap5' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap5(source: SetAddrMap5) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeAddress(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap5(): DictionaryValue<SetAddrMap5> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap5(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap5(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap6 = {
    $$type: 'SetAddrMap6';
    key: Address;
    value: bigint | null;
}

export function storeSetAddrMap6(src: SetAddrMap6) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1742733058, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap6(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1742733058) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetAddrMap6' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap6(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetAddrMap6' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap6(source: SetAddrMap6) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap6(): DictionaryValue<SetAddrMap6> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap6(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap6(src.loadRef().beginParse());
        }
    }
}

export type SetAddrMap7 = {
    $$type: 'SetAddrMap7';
    key: Address;
    value: bigint | null;
}

export function storeSetAddrMap7(src: SetAddrMap7) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2054067599, 32);
        b_0.storeAddress(src.key);
        if (src.value !== null && src.value !== undefined) { b_0.storeBit(true).storeInt(src.value, 257); } else { b_0.storeBit(false); }
    };
}

export function loadSetAddrMap7(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2054067599) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    let _value = sc_0.loadBit() ? sc_0.loadIntBig(257) : null;
    return { $$type: 'SetAddrMap7' as const, key: _key, value: _value };
}

function loadTupleSetAddrMap7(source: TupleReader) {
    let _key = source.readAddress();
    let _value = source.readBigNumberOpt();
    return { $$type: 'SetAddrMap7' as const, key: _key, value: _value };
}

function storeTupleSetAddrMap7(source: SetAddrMap7) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSetAddrMap7(): DictionaryValue<SetAddrMap7> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSetAddrMap7(src)).endCell());
        },
        parse: (src) => {
            return loadSetAddrMap7(src.loadRef().beginParse());
        }
    }
}

export type SomeStruct = {
    $$type: 'SomeStruct';
    value: bigint;
}

export function storeSomeStruct(src: SomeStruct) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeInt(src.value, 257);
    };
}

export function loadSomeStruct(slice: Slice) {
    let sc_0 = slice;
    let _value = sc_0.loadIntBig(257);
    return { $$type: 'SomeStruct' as const, value: _value };
}

function loadTupleSomeStruct(source: TupleReader) {
    let _value = source.readBigNumber();
    return { $$type: 'SomeStruct' as const, value: _value };
}

function storeTupleSomeStruct(source: SomeStruct) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.value);
    return builder.build();
}

function dictValueParserSomeStruct(): DictionaryValue<SomeStruct> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSomeStruct(src)).endCell());
        },
        parse: (src) => {
            return loadSomeStruct(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap1 = {
    $$type: 'DelIntMap1';
    key: bigint;
}

export function storeDelIntMap1(src: DelIntMap1) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(4020709512, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap1(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 4020709512) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap1' as const, key: _key };
}

function loadTupleDelIntMap1(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap1' as const, key: _key };
}

function storeTupleDelIntMap1(source: DelIntMap1) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap1(): DictionaryValue<DelIntMap1> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap1(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap1(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap2 = {
    $$type: 'DelIntMap2';
    key: bigint;
}

export function storeDelIntMap2(src: DelIntMap2) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3449419204, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap2(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3449419204) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap2' as const, key: _key };
}

function loadTupleDelIntMap2(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap2' as const, key: _key };
}

function storeTupleDelIntMap2(source: DelIntMap2) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap2(): DictionaryValue<DelIntMap2> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap2(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap2(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap3 = {
    $$type: 'DelIntMap3';
    key: bigint;
}

export function storeDelIntMap3(src: DelIntMap3) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(219173202, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap3(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 219173202) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap3' as const, key: _key };
}

function loadTupleDelIntMap3(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap3' as const, key: _key };
}

function storeTupleDelIntMap3(source: DelIntMap3) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap3(): DictionaryValue<DelIntMap3> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap3(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap3(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap4 = {
    $$type: 'DelIntMap4';
    key: bigint;
}

export function storeDelIntMap4(src: DelIntMap4) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2720317706, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap4(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2720317706) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap4' as const, key: _key };
}

function loadTupleDelIntMap4(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap4' as const, key: _key };
}

function storeTupleDelIntMap4(source: DelIntMap4) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap4(): DictionaryValue<DelIntMap4> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap4(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap4(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap5 = {
    $$type: 'DelIntMap5';
    key: bigint;
}

export function storeDelIntMap5(src: DelIntMap5) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1419276789, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap5(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1419276789) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap5' as const, key: _key };
}

function loadTupleDelIntMap5(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap5' as const, key: _key };
}

function storeTupleDelIntMap5(source: DelIntMap5) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap5(): DictionaryValue<DelIntMap5> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap5(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap5(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap6 = {
    $$type: 'DelIntMap6';
    key: bigint;
}

export function storeDelIntMap6(src: DelIntMap6) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2189797429, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap6(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2189797429) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap6' as const, key: _key };
}

function loadTupleDelIntMap6(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap6' as const, key: _key };
}

function storeTupleDelIntMap6(source: DelIntMap6) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap6(): DictionaryValue<DelIntMap6> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap6(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap6(src.loadRef().beginParse());
        }
    }
}

export type DelUIntMap7 = {
    $$type: 'DelUIntMap7';
    key: bigint;
}

export function storeDelUIntMap7(src: DelUIntMap7) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2691412305, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelUIntMap7(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2691412305) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelUIntMap7' as const, key: _key };
}

function loadTupleDelUIntMap7(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelUIntMap7' as const, key: _key };
}

function storeTupleDelUIntMap7(source: DelUIntMap7) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelUIntMap7(): DictionaryValue<DelUIntMap7> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelUIntMap7(src)).endCell());
        },
        parse: (src) => {
            return loadDelUIntMap7(src.loadRef().beginParse());
        }
    }
}

export type DelIntMap8 = {
    $$type: 'DelIntMap8';
    key: bigint;
}

export function storeDelIntMap8(src: DelIntMap8) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1550303823, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelIntMap8(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1550303823) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelIntMap8' as const, key: _key };
}

function loadTupleDelIntMap8(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelIntMap8' as const, key: _key };
}

function storeTupleDelIntMap8(source: DelIntMap8) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelIntMap8(): DictionaryValue<DelIntMap8> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelIntMap8(src)).endCell());
        },
        parse: (src) => {
            return loadDelIntMap8(src.loadRef().beginParse());
        }
    }
}

export type DelUIntMap9 = {
    $$type: 'DelUIntMap9';
    key: bigint;
}

export function storeDelUIntMap9(src: DelUIntMap9) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3693638526, 32);
        b_0.storeInt(src.key, 257);
    };
}

export function loadDelUIntMap9(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3693638526) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadIntBig(257);
    return { $$type: 'DelUIntMap9' as const, key: _key };
}

function loadTupleDelUIntMap9(source: TupleReader) {
    let _key = source.readBigNumber();
    return { $$type: 'DelUIntMap9' as const, key: _key };
}

function storeTupleDelUIntMap9(source: DelUIntMap9) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.key);
    return builder.build();
}

function dictValueParserDelUIntMap9(): DictionaryValue<DelUIntMap9> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelUIntMap9(src)).endCell());
        },
        parse: (src) => {
            return loadDelUIntMap9(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap1 = {
    $$type: 'DelAddrMap1';
    key: Address;
}

export function storeDelAddrMap1(src: DelAddrMap1) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(857778563, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap1(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 857778563) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap1' as const, key: _key };
}

function loadTupleDelAddrMap1(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap1' as const, key: _key };
}

function storeTupleDelAddrMap1(source: DelAddrMap1) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap1(): DictionaryValue<DelAddrMap1> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap1(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap1(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap2 = {
    $$type: 'DelAddrMap2';
    key: Address;
}

export function storeDelAddrMap2(src: DelAddrMap2) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1830547906, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap2(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1830547906) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap2' as const, key: _key };
}

function loadTupleDelAddrMap2(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap2' as const, key: _key };
}

function storeTupleDelAddrMap2(source: DelAddrMap2) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap2(): DictionaryValue<DelAddrMap2> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap2(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap2(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap3 = {
    $$type: 'DelAddrMap3';
    key: Address;
}

export function storeDelAddrMap3(src: DelAddrMap3) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3965354435, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap3(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3965354435) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap3' as const, key: _key };
}

function loadTupleDelAddrMap3(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap3' as const, key: _key };
}

function storeTupleDelAddrMap3(source: DelAddrMap3) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap3(): DictionaryValue<DelAddrMap3> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap3(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap3(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap4 = {
    $$type: 'DelAddrMap4';
    key: Address;
}

export function storeDelAddrMap4(src: DelAddrMap4) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3900245044, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap4(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3900245044) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap4' as const, key: _key };
}

function loadTupleDelAddrMap4(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap4' as const, key: _key };
}

function storeTupleDelAddrMap4(source: DelAddrMap4) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap4(): DictionaryValue<DelAddrMap4> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap4(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap4(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap5 = {
    $$type: 'DelAddrMap5';
    key: Address;
}

export function storeDelAddrMap5(src: DelAddrMap5) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(4107278668, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap5(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 4107278668) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap5' as const, key: _key };
}

function loadTupleDelAddrMap5(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap5' as const, key: _key };
}

function storeTupleDelAddrMap5(source: DelAddrMap5) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap5(): DictionaryValue<DelAddrMap5> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap5(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap5(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap6 = {
    $$type: 'DelAddrMap6';
    key: Address;
}

export function storeDelAddrMap6(src: DelAddrMap6) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(4067967443, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap6(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 4067967443) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap6' as const, key: _key };
}

function loadTupleDelAddrMap6(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap6' as const, key: _key };
}

function storeTupleDelAddrMap6(source: DelAddrMap6) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap6(): DictionaryValue<DelAddrMap6> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap6(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap6(src.loadRef().beginParse());
        }
    }
}

export type DelAddrMap7 = {
    $$type: 'DelAddrMap7';
    key: Address;
}

export function storeDelAddrMap7(src: DelAddrMap7) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(3413890854, 32);
        b_0.storeAddress(src.key);
    };
}

export function loadDelAddrMap7(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3413890854) { throw Error('Invalid prefix'); }
    let _key = sc_0.loadAddress();
    return { $$type: 'DelAddrMap7' as const, key: _key };
}

function loadTupleDelAddrMap7(source: TupleReader) {
    let _key = source.readAddress();
    return { $$type: 'DelAddrMap7' as const, key: _key };
}

function storeTupleDelAddrMap7(source: DelAddrMap7) {
    let builder = new TupleBuilder();
    builder.writeAddress(source.key);
    return builder.build();
}

function dictValueParserDelAddrMap7(): DictionaryValue<DelAddrMap7> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDelAddrMap7(src)).endCell());
        },
        parse: (src) => {
            return loadDelAddrMap7(src.loadRef().beginParse());
        }
    }
}

 type MapTestContract_init_args = {
    $$type: 'MapTestContract_init_args';
}

function initMapTestContract_init_args(src: MapTestContract_init_args) {
    return (builder: Builder) => {
        let b_0 = builder;
    };
}

async function MapTestContract_init() {
    const __code = Cell.fromBase64('te6ccgICAbgAAQAAW7UAAAEU/wD0pBP0vPLICwABAgFiAAIAAwLw0AHQ0wMBcbCjAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IhUUFMDbwT4YQL4Yts8ETARMhEwES8RMREvES4RMBEuES0RLxEtESwRLhEsESsRLRErESoRLBEqESkRKxEpESgRKhEoEScRKREnESYRKBEmAbEAHAIBIAAEAAUCASAABgAHAgEgABAAEQIBIAAIAAkCASAADAANAgEgAEsATAIBIAAKAAsCASAAYABhAgEgAHQAdQIBIACKAIsCASAADgAPAgEgAKoAqwIBIAC6ALsCASAAEgATAgEgATsBPAIBIAAUABUCASAAFgAXAgEgAMoAywIBIADfAOACASAAGAAZAgEgABoAGwIBIAEAAQECASABDQEOAgEgARgBGQIBIAEsAS0B/BElEScRJREkESYRJBEjESURIxEiESQRIhEhESMRIREgESIRIBEfESERHxEeESARHhEdER8RHREcER4RHBEbER0RGxEaERwRGhEZERsRGREYERoRGBEXERkRFxEWERgRFhEVERcRFREUERYRFBETERURExESERQREhERERMREQAdAtYREBESERAPEREPDhEQDhDfVRzbPPLggsj4QwHMfwHKABExETARLxEuES0RLBErESoRKREoEScRJhElESQRIxEiESERIBEfER4RHREcERsRGhEZERgRFxEWERURFBETERIREREQVeDbPMntVAAeAB8C9u2i7fsBkjB/4HAh10nCH5UwINcLH94gwAAi10nBIbCSW3/gIIIQWgSjGLqOQjDTHwGCEFoEoxi68uCBgQEB1wDSAAGVgQEB1wCSbQHiWWwSgQEBIAQRNARDMCFulVtZ9FowmMgBzwBBM/RC4hEwf+AgghBhJc72uuMCIAAgACEB9gERMAERMfQAAREuAfQAESzI9AABESsB9AABESkB9AARJ8j0AAERJgH0AAERJAH0ABEiyPQAAREhAfQAAREfAfQAER3I9AABERwB9AABERoB9AARGMj0AAERFwH0AAERFQH0ABETyPQAARESAfQAAREQAfQADsj0AB30AABJAHww0x8BghBhJc72uvLggYEBAdcA0gABktIAkm0B4llsEgIRMQKBAQFZcSFulVtZ9FowmMgBzwBBM/RC4hEv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AHsB5oAgKIEBAUEz9AxvoZQB1wAwkltt4iBu8tCAAYBAKIEBAUEz9AxvoZQB1wAwkltt4iBu8tCABYMGKIEBAUEz9AxvoZQB1wAwkltt4iBu8tCABoMHKIEBAUEz9AxvoZQB1wAwkltt4iBu8tCAgQEBIBA2QZABsAAEVi8CASAAfwCAAgFIAIUAhgL3pXO2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRCJCIkQiQiJAIkIiQCI+IkAiPiI8Ij4iPCI6IjwiOwGxAIEC96WVtngiYCJiImAiXiJgIl4iXCJeIlwiWiJcIloiWCJaIlgiViJYIlYiVCJWIlQiUiJUIlIiUCJSIlAiTiJQIk4iTCJOIkwiSiJMIkoiSCJKIkgiRiJIIkYiRCJGIkQiQiJEIkIiQCJCIkAiPiJAIj4iPCI+IjwiOiI8IjsBsQCDAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEAggAugQEBVhYCgEBBM/QMb6GUAdcBMJJbbeIBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQCEAC6BAQFWHAKDBkEz9AxvoZQB1wAwkltt4gL3oa9s8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdgGxAIcCJaMTbPNs8VxBfD1cQXw9XEF8PMYBsQCJAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEAiAAsgQEBViACeEEz9AxvoZQB1wAwkltt4gACLgIBIACMAI0CASAAlACVAievAe2ebZ4riC+Hq4gvh6uIL4eYwAGxAI4CAVgAjwCQAARWLAIlpke2ebZ4riC+Hq4gvh6uIL4eYwGxAJEC86XoQa6TAgIXdeXBEEGuFhRBAgn/deWhEwYTdeXBEbZ4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJFAbEAkgACLwL8ESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQAJMBegAegQELVhECWfQLb6GSMG3fAgEgAJYAlwIBIACZAJoCJqpO2zzbPFcQXw9XEF8PVxBfDzEBsQGrAiaqIts82zxXEF8PVxBfD1cQXw8xAbEAmAAEVi0CASAAmwCcAgFIAKEAogLzpIhBrpMCAhd15cEQQa4WFEECCf915aETBhN15cERtngiYCJiImAiXiJgIl4iXCJeIlwiWiJcIloiWCJaIlgiViJYIlYiVCJWIlQiUiJUIlIiUCJSIlAiTiJQIk4iTCJOIkwiSiJMIkoiSCJKIkgiRiJIIkYiRCJGIkUBsQCdAvOkbkGukwICF3XlwRBBrhYUQQIJ/3XloRMGE3XlwRG2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRQGxAJ8C/BEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHREcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEACeAXoALIEBCyQCgEBBM/QKb6GUAdcBMJJbbeIC/BEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHREcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEACgAXoALIEBCyoCgwZBM/QKb6GUAdcAMJJbbeIC86JYg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCI2zwRMBExETARLxEwES8RLhEvES4RLREuES0RLBEtESwRKxEsESsRKhErESoRKREqESkRKBEpESgRJxEoEScRJhEnESYRJREmESURJBElESQRIxEkESMRIhEjESKAbEAowIBywClAKYC/BEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHREcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEACkAXoAKoEBCy4CeEEz9ApvoZQB1wAwkltt4gIja2zzbPFcQXw9XEF8PVxBfDzGAbEApwL11tngiYCJiImAiXiJgIl4iXCJeIlwiWiJcIloiWCJaIlgiViJYIlYiVCJWIlQiUiJUIlIiUCJSIlAiTiJQIk4iTCJOIkwiSiJMIkoiSCJKIkgiRiJIIkYiRCJGIkQiQiJEIkIiQCJCIkAiPiJAIj4iPCI+IjwiOiI8IjsAbEAqAAEVhABxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQCpACyBAQFWMQJxQTP0DG+hlAHXADCSW23iAiesrG2ebZ4riC+Hq4gvh6uIL4eYwAGxAKwCASAArQCuAAZWMG4C+Ko72zwRMBExETARLxEwES8RLhEvES4RLREuES0RLBEtESwRKxEsESsRKhErESoRKREqESkRKBEpESgRJxEoEScRJhEnESYRJREmESURJBElESQRIxEkESMRIhEjESIRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0BsQCvAgEgALEAsgHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xALAALoMHVigCgQEBQTP0DG+hlAHXADCSW23iAgEgALMAtAL3pdO2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRCJCIkQiQiJAIkIiQCI+IkAiPiI8Ij4iPCI6IjwiOwGxALgC96JrbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHYBsQC1AiWhh2zzbPFcQXw9XEF8PVxBfDzGAbEAtwHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xALYALoAQViwCgQEBQTP0DG+hlAHXADCSW23iAARWEQHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xALkALoAgViQCgQEBQTP0Dm+hlAHXADCSW23iAvmsXu2eCJgImQiYCJeImIiXiJcImAiXCJaIl4iWiJYIlwiWCJWIloiViJUIlgiVCJSIlYiUiJQIlQiUCJOIlIiTiJMIlAiTCJKIk4iSiJIIkwiSCJGIkoiRiJEIkgiRCJCIkYiQiJAIkQiQCI+IkIiPiI8IkAiPCI6Ij4iOwAGxALwCASAAwADBAdIRHBEeERwRGxEdERsRGhEcERoRGREbERkRGBEaERgRFxEZERcRFhEYERYRFREXERURFBEWERQRExEVERMREhEUERIRERETEREREBESERAPEREPDhEQDhDfVRzbPFcQXw9XEF8PVxBfDzEAvQHqbW1tbW1tBXhTh4EBASFulVtZ9FswmMgBzwBBM/RD4gSAEFOHgQEBIW6VW1n0WzCYyAHPAEEz9EPiA4AgU4eBAQEhbpVbWfRbMJjIAc8AQTP0Q+ICgEBTh4EBASFulVtZ9FswmMgBzwBBM/RD4gGDBlOHgQEBAL4B/CFulVtZ9FswmMgBzwBBM/RD4hWDB1QgiIEBASFulVtZ9FswmMgBzwBBM/RD4gN4J4EBAUEz9A5voZQB1wAwkltt4iBu8tCAAoAQJ4EBAUEz9A5voZQB1wAwkltt4iBu8tCAAYAgJ4EBAUEz9A5voZQB1wAwkltt4iBu8tCABAC/ALaAQCeBAQFBM/QOb6GUAdcAMJJbbeIgbvLQgAWDBieBAQFBM/QOb6GUAdcAMJJbbeIgbvLQgBODB1AHgQEBQTP0Dm+hlAHXADCSW23iIG7y0IACoFigWKBYoAGgAviruNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdAbEAwgIBIADEAMUBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQDDACyBAQFWGQJ4QTP0DG+hlAHXATCSW23iAvemM7Z4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJEIkIiRCJCIkAiQiJAIj4iQCI+IjwiPiI8IjoiPCI7AbEAxgL3ptW2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRCJCIkQiQiJAIkIiQCI+IkAiPiI8Ij4iPCI6IjwiOwGxAMgBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQDHAC6BAQFWFQKDBkEz9AxvoZQB1wEwkltt4gHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xAMkALoEBAVYdAoBAQTP0DG+hlAHXADCSW23iAgEgAMwAzQIBIADVANYCJqke2zzbPFcQXw9XEF8PVxBfDzEBsQDOAgFqAM8A0AAEViACJbzds82zxXEF8PVxBfD1cQXw8xgBsQDRAvO7Ug10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCI2zwRMBExETARLxEwES8RLhEvES4RLREuES0RLBEtESwRKxEsESsRKhErESoRKREqESkRKBEpESgRJxEoEScRJhEnESYRJREmESURJBElESQRIxEkESMRIhEjESKAGxANIABFYmAvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxAA0wDUAECBAQtWEAJZ9AtvoZIwbd8gbpIwbZrQgQEB1wABMW8B4gAyXw8xIG6SMG2ZIG7y0IBvIW8B4iBukjBt3gIBWADXANgCAUgA2wDcAiWg+2zzbPFcQXw9XEF8PVxBfDzGAbEA2QIloots82zxXEF8PVxBfD1cQXw8xgGxANoABFYUAAIlAiWjx2zzbPFcQXw9XEF8PVxBfDzGAbEA3QIlobds82zxXEF8PVxBfD1cQXw8xgGxAN4AAisABFYYAgEgAOEA4gIBIADsAO0CASAA8wD0AgEgAOMA5AIBIADlAOYCJaTZtnm2eK4gvh6uIL4eriC+HmMBsQDrAvOjXINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEigGxAOcC96EXbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHYBsQDpAvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxAA6AF6ACyBAQspAoMHQTP0Cm+hlAHXADCSW23iAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEA6gAegQEBVi4CWfQMb6GSMG3fAARWJQImqh/bPNs8VxBfD1cQXw9XEF8PMQGxAO4CAUgA7wDwAARWEwIlo0Ns82zxXEF8PVxBfD1cQXw8xgGxAPECJaEzbPNs8VxBfD1cQXw9XEF8PMYBsQDyAAIqAARWGQIBIAD1APYCASAA+gD7AvOgFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEigGxAPcCJaD/bPNs8VxBfD1cQXw9XEF8PMYBsQD5AvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxAA+AF6ACyBAQslAoAgQTP0Cm+hlAHXATCSW23iAARWIQLzodiDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIoBsQD8Avejk2zwRMBExETARLxEwES8RLhEvES4RLREuES0RLBEtESwRKxEsESsRKhErESoRKREqESkRKBEpESgRJxEoEScRJhEnESYRJREmESURJBElESQRIxEkESMRIhEjESIRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER2AbEA/gL8ESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQAP0BegAsgQELLQKAEEEz9ApvoZQB1wAwkltt4gHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xAP8ALoEBASBWM1AzQTP0DG+hlAHXADCSW23iAviqets8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdAbEBAgIBIAEEAQUBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQEDACx4Vi0CgQEBQTP0DG+hlAHXADCSW23iAvelt7Z4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJEIkIiRCJCIkAiQiJAIj4iQCI+IjwiPiI8IjoiPCI7AbEBBgIBSAEIAQkBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQEHAC6DBlYpAoEBAUEz9AxvoZQB1wAwkltt4gIluP2zzbPFcQXw9XEF8PVxBfDzGAGxAQoC97qNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdgBsQELAARWKAHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xAQwALoBAViMCgQEBQTP0Dm+hlAHXADCSW23iAgEgAQ8BEAImqS/bPNs8VxBfD1cQXw9XEF8PMQGxARcC96RvtngiYCJiImAiXiJgIl4iXCJeIlwiWiJcIloiWCJaIlgiViJYIlYiVCJWIlQiUiJUIlIiUCJSIlAiTiJQIk4iTCJOIkwiSiJMIkoiSCJKIkgiRiJIIkYiRCJGIkQiQiJEIkIiQCJCIkAiPiJAIj4iPCI+IjwiOiI8IjsBsQERAgEgARMBFAHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xARIAEFYxgQEB9FoxAiWh82zzbPFcQXw9XEF8PVxBfDzGAbEBFQIlo4Ns82zxXEF8PVxBfD1cQXw8xgGxARYABFYSAAIjAARWGgIBIAEaARsCASABIwEkAgFYARwBHQL3p/O2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRCJCIkQiQiJAIkIiQCI+IkAiPiI8Ij4iPCI6IjwiOwGxASECJb/ds82zxXEF8PVxBfD1cQXw8xgBsQEeAve4rbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHYAbEBHwAEVh8BxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQEgAC6BAQEgVhtQM0Ez9AxvoZQB1wAwkltt4gHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xASIALoEBAVYUAoMHQTP0DG+hlAHXATCSW23iAvemsbZ4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJEIkIiRCJCIkAiQiJAIj4iQCI+IjwiPiI8IjoiPCI7AbEBJQIBIAEnASgBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQEmAC6BAQFWGAKAEEEz9AxvoZQB1wEwkltt4gIloLts82zxXEF8PVxBfD1cQXw8xgGxASkC96CvbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHYBsQEqAARWJwHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xASsALoEBAVYeAoAgQTP0DG+hlAHXADCSW23iAgOX0AEuAS8CASABMQEyAiWg7Z5tniuIL4eriC+Hq4gvh5jAAbEBMACToME4LnYerpZXPY9CdhzrJUKNs0E4TusalpWyPlmRadeW/vixHME4ECrgDcAzscpnLB1XI5LZYcE4TsunLVmnZbmdB0s2yjN0UkAAAiQCASABMwE0Aveku7Z4ImAiZCJgIl4iYiJeIlwiYCJcIloiXiJaIlgiXCJYIlYiWiJWIlQiWCJUIlIiViJSIlAiVCJQIk4iUiJOIkwiUCJMIkoiTiJKIkgiTCJIIkYiSiJGIkQiSCJEIkIiRiJCIkAiRCJAIj4iQiI+IjwiQCI8IjoiPiI7AbEBNwIlokts82zxXEF8PVxBfD1cQXw8xgGxATUCJaA7bPNs8VxBfD1cQXw9XEF8PMYBsQE2AAIsAARWGwHSERwRHhEcERsRHREbERoRHBEaERkRGxEZERgRGhEYERcRGREXERYRGBEWERURFxEVERQRFhEUERMRFRETERIRFBESERERExERERAREhEQDxERDw4REA4Q31Uc2zxXEF8PVxBfD1cQXw8xATgB7G1tbW1tbW0GgQEBU5h4IW6VW1n0WjCYyAHPAEEz9ELiBYEBAVOYgBAhbpVbWfRaMJjIAc8AQTP0QuIEgQEBU5iAICFulVtZ9FowmMgBzwBBM/RC4gOBAQFTmIBAIW6VW1n0WjCYyAHPAEEz9ELiAoEBAVOYgwYBOQH+IW6VW1n0WjCYyAHPAEEz9ELiAYEBAVOYgwchbpVbWfRaMJjIAc8AQTP0QuKBAQEgEDhUShNQqiFulVtZ9FowmMgBzwBBM/RC4gSBAQEoeEEz9AxvoZQB1wAwkltt4iBu8tCAA4EBASiAEEEz9AxvoZQB1wAwkltt4iBu8tCAAgE6AeaBAQEogCBBM/QMb6GUAdcAMJJbbeIgbvLQgAGBAQEogEBBM/QMb6GUAdcAMJJbbeIgbvLQgAWBAQEogwZBM/QMb6GUAdcAMJJbbeIgbvLQgAaBAQEogwdBM/QMb6GUAdcAMJJbbeIgbvLQgIEBASAQNkGQAbACASABPQE+AgEgAUoBSwIBIAE/AUACASABSAFJAgEgAVcBWAIBIAFBAUICJqsm2zzbPFcQXw9XEF8PVxBfDzEBsQFDAgFIAUQBRQACIQIlodds82zxXEF8PVxBfD1cQXw8xgGxAUYCJaOnbPNs8VxBfD1cQXw9XEF8PMYBsQFHAAInAARWHAIBIAFlAWYCASABewF8AgEgAUwBTQIBIAFVAVYCASABhwGIAgEgAU4BTwImqvjbPNs8VxBfD1cQXw9XEF8PMQGxAVACAUgBUQFSAARWFgIloN9s82zxXEF8PVxBfD1cQXw8xgGxAVMCJaKvbPNs8VxBfD1cQXw9XEF8PMYBsQFUAAIpAARWHgIBIAGUAZUCASABpAGlAgEgAVkBWgIBIAFgAWECJac1tnm2eK4gvh6uIL4eriC+HmMBsQFbAgEgAVwBXQAEViQAD6L7tRNDSAAGAvOgVINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEigGxAV4C/BEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHREcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEAFfAXoAHIEBCy8CWfQKb6GSMG3fAvOnaEGukwICF3XlwRBBrhYUQQIJ/3XloRMGE3XlwRG2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRQGxAWICJaWTtnm2eK4gvh6uIL4eriC+HmMBsQFkAvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxABYwF6ADCBAQtWEwKBAQFBM/QKb6GUAdcAMJJbbeIABFYqAgEgAWcBaAIBIAFxAXICASABaQFqAvOmCEGukwICF3XlwRBBrhYUQQIJ/3XloRMGE3XlwRG2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRQGxAW8C96OXbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHYBsQFrAvOh3INdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiNs8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEigGxAW0B8hEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMSBukjBtmSBu8tCAbyFvAeIgbpIwbd4BbABAgQEBVi8CWfQNb6GSMG3fIG6SMG2a0IEBAdcAATFvAeIC/BEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHREcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEAFuAXoALoEBCygCgQEBQTP0Cm+hlAHXADCSW23iAvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxABcAF6ACyBAQsiAoMHQTP0Cm+hlAHXATCSW23iAvOnSkGukwICF3XlwRBBrhYUQQIJ/3XloRMGE3XlwRG2eCJgImIiYCJeImAiXiJcIl4iXCJaIlwiWiJYIloiWCJWIlgiViJUIlYiVCJSIlQiUiJQIlIiUCJOIlAiTiJMIk4iTCJKIkwiSiJIIkoiSCJGIkgiRiJEIkYiRQGxAXMCASABdQF2AvwRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER0RHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxABdAF6ACyBAQsmAoAQQTP0Cm+hlAHXATCSW23iAiWjo2zzbPFcQXw9XEF8PVxBfDzGAbEBdwLzo1iDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIoBsQF4AARWKQL8ESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQAXkBegAsgQELLAKAIEEz9ApvoZQB1wAwkltt4gAGXw8xAgEgAX0BfgIBSAGDAYQAc6d3Ghq0uDM5nReXqLaot7UZtyyjIhwYmZqyNyogspwiODIxpyQcMSC1uhkguKQzqxw6u6w6IiobO8ECASABfwGAAiWib2zzbPFcQXw9XEF8PVxBfDzGAbEBgQIloB9s82zxXEF8PVxBfD1cQXw8xgGxAYIABFYXAAIiAiWhU2zzbPFcQXw9XEF8PVxBfDzGAbEBhQIloyNs82zxXEF8PVxBfD1cQXw8xgGxAYYAAiYABFYdAgEgAYkBigL4qanbPBEwETERMBEvETARLxEuES8RLhEtES4RLREsES0RLBErESwRKxEqESsRKhEpESoRKREoESkRKBEnESgRJxEmEScRJhElESYRJREkESURJBEjESQRIxEiESMRIhEhESIRIREgESERIBEfESARHxEeER8RHhEdER4RHQGxAZICAVgBiwGMAvemEbZ4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJEIkIiRCJCIkAiQiJAIj4iQCI+IjwiPiI8IjoiPCI7AbEBkAL3v72zwRMBExETARLxEwES8RLhEvES4RLREuES0RLBEtESwRKxEsESsRKhErESoRKREqESkRKBEpESgRJxEoEScRJhEnESYRJREmESURJBElESQRIxEkESMRIhEjESIRIREiESERIBEhESARHxEgER8RHhEfER4RHREeER2AGxAY0CJb2Ns82zxXEF8PVxBfD1cQXw8xgBsQGPAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEBjgAugEBWKgKBAQFBM/QMb6GUAdcAMJJbbeIABFYiAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEBkQAugwZWIgKBAQFBM/QOb6GUAdcAMJJbbeIBxhEcER0RHBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDts8VxBfD1cQXw9XEF8PMQGTACx4ViYCgQEBQTP0Dm+hlAHXADCSW23iAgEgAZYBlwIBIAGfAaACASABmAGZAvelF7Z4ImAiYiJgIl4iYCJeIlwiXiJcIloiXCJaIlgiWiJYIlYiWCJWIlQiViJUIlIiVCJSIlAiUiJQIk4iUCJOIkwiTiJMIkoiTCJKIkgiSiJIIkYiSCJGIkQiRiJEIkIiRCJCIkAiQiJAIj4iQCI+IjwiPiI8IjoiPCI7AbEBnQL3o+Ns8ETARMREwES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdgGxAZoCJaPnbPNs8VxBfD1cQXw9XEF8PMYBsQGcAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEBmwAugQEBVhcCgCBBM/QMb6GUAdcBMJJbbeIABFYjAcYRHBEdERwRGxEcERsRGhEbERoRGREaERkRGBEZERgRFxEYERcRFhEXERYRFREWERURFBEVERQRExEUERMREhETERIRERESEREREBERERAPERAPVQ7bPFcQXw9XEF8PVxBfDzEBngAugQEBVh8CgBBBM/QMb6GUAdcAMJJbbeIC96RVtngiYCJiImAiXiJgIl4iXCJeIlwiWiJcIloiWCJaIlgiViJYIlYiVCJWIlQiUiJUIlIiUCJSIlAiTiJQIk4iTCJOIkwiSiJMIkoiSCJKIkgiRiJIIkYiRCJGIkQiQiJEIkIiQCJCIkAiPiJAIj4iPCI+IjwiOiI8IjsBsQGhAiWlVbZ5tniuIL4eriC+Hq4gvh5jAbEBowHGERwRHREcERsRHBEbERoRGxEaERkRGhEZERgRGREYERcRGBEXERYRFxEWERURFhEVERQRFREUERMRFBETERIRExESEREREhERERAREREQDxEQD1UO2zxXEF8PVxBfD1cQXw8xAaIALoEBAVYbAoMHQTP0DG+hlAHXADCSW23iAARWKwIBWAGmAacCJqgW2zzbPFcQXw9XEF8PVxBfDzEBsQGyAiWjZ2zzbPFcQXw9XEF8PVxBfDzGAbEBqAIBIAGpAaoABFYVAiW8XbPNs8VxBfD1cQXw9XEF8PMYAbEBqwL3v92zwRMBEyETARLxExES8RLhEwES4RLREvES0RLBEuESwRKxEtESsRKhEsESoRKRErESkRKBEqESgRJxEpEScRJhEoESYRJREnESURJBEmESQRIxElESMRIhEkESIRIREjESERIBEiESARHxEhER8RHhEgER4RHREfER2AGxAawAAiAB0hEcER4RHBEbER0RGxEaERwRGhEZERsRGREYERoRGBEXERkRFxEWERgRFhEVERcRFREUERYRFBETERURExESERQREhERERMREREQERIREA8REQ8OERAOEN9VHNs8VxBfD1cQXw9XEF8PMQGtAextbW1tbW1tBoEBAVOYeCFulVtZ9FowmMgBzwFBM/RC4gWBAQFTmIAQIW6VW1n0WjCYyAHPAUEz9ELiBIEBAVOYgCAhbpVbWfRaMJjIAc8BQTP0QuIDgQEBU5iAQCFulVtZ9FowmMgBzwFBM/RC4gKBAQFTmIMGAa4B/iFulVtZ9FowmMgBzwFBM/RC4gGBAQFTmIMHIW6VW1n0WjCYyAHPAUEz9ELigQEBIBA4VEoTUKohbpVbWfRaMJjIAc8AQTP0QuIEgQEBKHhBM/QMb6GUAdcBMJJbbeIgbvLQgAOBAQEogBBBM/QMb6GUAdcBMJJbbeIgbvLQgAIBrwHmgQEBKIAgQTP0DG+hlAHXATCSW23iIG7y0IABgQEBKIBAQTP0DG+hlAHXATCSW23iIG7y0IAFgQEBKIMGQTP0DG+hlAHXATCSW23iIG7y0IAGgQEBKIMHQTP0DG+hlAHXATCSW23iIG7y0ICBAQEgEDZBkAGwAEBBM/QMb6GUAdcAMJJbbeIgbvLQgFmgWKBYoFigWKABoAI07UTQ1AH4Y9IAAeMCMPgo1wsKgwm68uCJ2zwBswG0AAIoAvjbPFcxES8RMBEvES4RLxEuES0RLhEtESwRLREsESsRLBErESoRKxEqESkRKhEpESgRKREoEScRKBEnESYRJxEmESURJhElESQRJREkESMRJBEjESIRIxEiESERIhEhESARIREgER8RIBEfER4RHxEeER0RHhEdERwRHREcAbUBtgBibW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbQH29AT0BNQB0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AT0BNQwAbcAnBEbERwRGxEaERsRGhEZERoRGREYERkRGBEXERgRFxEWERcRFhEVERYRFREUERURFBETERQRExESERMREhERERIREREQEREREA8REA9VDgBI0PQE9AT0BNQw0PQE9AT0BNQw0PQE9AQwES8RMREvES8RMBEv');
    const __system = Cell.fromBase64('');
    let builder = beginCell();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initMapTestContract_init_args({ $$type: 'MapTestContract_init_args' })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}

const MapTestContract_errors: { [key: number]: { message: string } } = {
    2: { message: `Stack undeflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
    137: { message: `Masterchain support is not enabled for this contract` },
}

const MapTestContract_types: ABIType[] = [
    {"name":"StateInit","header":null,"fields":[{"name":"code","type":{"kind":"simple","type":"cell","optional":false}},{"name":"data","type":{"kind":"simple","type":"cell","optional":false}}]},
    {"name":"Context","header":null,"fields":[{"name":"bounced","type":{"kind":"simple","type":"bool","optional":false}},{"name":"sender","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"raw","type":{"kind":"simple","type":"slice","optional":false}}]},
    {"name":"SendParameters","header":null,"fields":[{"name":"bounce","type":{"kind":"simple","type":"bool","optional":false}},{"name":"to","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mode","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"body","type":{"kind":"simple","type":"cell","optional":true}},{"name":"code","type":{"kind":"simple","type":"cell","optional":true}},{"name":"data","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"SetIntMap1","header":1510253336,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetIntMap2","header":1629867766,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"bool","optional":true}}]},
    {"name":"SetIntMap3","header":3613954633,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"SetIntMap4","header":383013829,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"SomeStruct","optional":true}}]},
    {"name":"SetIntMap5","header":2809746751,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"address","optional":true}}]},
    {"name":"SetIntMap6","header":1258686922,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetUIntMap7","header":3563204871,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetIntMap8","header":1910615278,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetUIntMap9","header":1765685895,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetAddrMap1","header":1749966413,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetAddrMap2","header":624157584,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"bool","optional":true}}]},
    {"name":"SetAddrMap3","header":4276365062,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"SetAddrMap4","header":1683777913,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"SomeStruct","optional":true}}]},
    {"name":"SetAddrMap5","header":1741376771,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"address","optional":true}}]},
    {"name":"SetAddrMap6","header":1742733058,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SetAddrMap7","header":2054067599,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":true,"format":257}}]},
    {"name":"SomeStruct","header":null,"fields":[{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap1","header":4020709512,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap2","header":3449419204,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap3","header":219173202,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap4","header":2720317706,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap5","header":1419276789,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap6","header":2189797429,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelUIntMap7","header":2691412305,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelIntMap8","header":1550303823,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelUIntMap9","header":3693638526,"fields":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}]},
    {"name":"DelAddrMap1","header":857778563,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap2","header":1830547906,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap3","header":3965354435,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap4","header":3900245044,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap5","header":4107278668,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap6","header":4067967443,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
    {"name":"DelAddrMap7","header":3413890854,"fields":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}]},
]

const MapTestContract_getters: ABIGetter[] = [
    {"name":"intMap1","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int"}},
    {"name":"intMap1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap2","arguments":[],"returnType":{"kind":"dict","key":"int","value":"bool"}},
    {"name":"intMap2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":true}},
    {"name":"intMap3","arguments":[],"returnType":{"kind":"dict","key":"int","value":"cell","valueFormat":"ref"}},
    {"name":"intMap3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"cell","optional":true}},
    {"name":"intMap4","arguments":[],"returnType":{"kind":"dict","key":"int","value":"SomeStruct","valueFormat":"ref"}},
    {"name":"intMap4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"SomeStruct","optional":true}},
    {"name":"intMap5","arguments":[],"returnType":{"kind":"dict","key":"int","value":"address"}},
    {"name":"intMap5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"address","optional":true}},
    {"name":"intMap6_1","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":8,"value":"int"}},
    {"name":"intMap6_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_2","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":16,"value":"int"}},
    {"name":"intMap6_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_3","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":32,"value":"int"}},
    {"name":"intMap6_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_4","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":64,"value":"int"}},
    {"name":"intMap6_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_5","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":128,"value":"int"}},
    {"name":"intMap6_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_6","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":256,"value":"int"}},
    {"name":"intMap6_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap6_7","arguments":[],"returnType":{"kind":"dict","key":"int","keyFormat":257,"value":"int"}},
    {"name":"intMap6_7Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_1","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":8,"value":"int"}},
    {"name":"intMap7_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_2","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":16,"value":"int"}},
    {"name":"intMap7_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_3","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":32,"value":"int"}},
    {"name":"intMap7_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_4","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":64,"value":"int"}},
    {"name":"intMap7_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_5","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":128,"value":"int"}},
    {"name":"intMap7_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap7_6","arguments":[],"returnType":{"kind":"dict","key":"uint","keyFormat":256,"value":"int"}},
    {"name":"intMap7_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_1","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":8}},
    {"name":"intMap8_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_2","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":16}},
    {"name":"intMap8_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_3","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":32}},
    {"name":"intMap8_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_4","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":64}},
    {"name":"intMap8_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_5","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":128}},
    {"name":"intMap8_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_6","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":256}},
    {"name":"intMap8_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap8_7","arguments":[],"returnType":{"kind":"dict","key":"int","value":"int","valueFormat":257}},
    {"name":"intMap8_7Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_1","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":8}},
    {"name":"intMap9_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_2","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":16}},
    {"name":"intMap9_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_3","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":32}},
    {"name":"intMap9_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_4","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":64}},
    {"name":"intMap9_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_5","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":128}},
    {"name":"intMap9_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap9_6","arguments":[],"returnType":{"kind":"dict","key":"int","value":"uint","valueFormat":256}},
    {"name":"intMap9_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"intMap10Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"intMap11Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"intMap12Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"intMap13Value","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"addrMap1","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int"}},
    {"name":"addrMap1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap2","arguments":[],"returnType":{"kind":"dict","key":"address","value":"bool"}},
    {"name":"addrMap2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":true}},
    {"name":"addrMap3","arguments":[],"returnType":{"kind":"dict","key":"address","value":"cell","valueFormat":"ref"}},
    {"name":"addrMap3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"cell","optional":true}},
    {"name":"addrMap4","arguments":[],"returnType":{"kind":"dict","key":"address","value":"SomeStruct","valueFormat":"ref"}},
    {"name":"addrMap4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"SomeStruct","optional":true}},
    {"name":"addrMap5","arguments":[],"returnType":{"kind":"dict","key":"address","value":"address"}},
    {"name":"addrMap5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"address","optional":true}},
    {"name":"addrMap6_1","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":8}},
    {"name":"addrMap6_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_2","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":16}},
    {"name":"addrMap6_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_3","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":32}},
    {"name":"addrMap6_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_4","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":64}},
    {"name":"addrMap6_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_5","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":128}},
    {"name":"addrMap6_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_6","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":256}},
    {"name":"addrMap6_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap6_7","arguments":[],"returnType":{"kind":"dict","key":"address","value":"int","valueFormat":257}},
    {"name":"addrMap6_7Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_1","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":8}},
    {"name":"addrMap7_1Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_2","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":16}},
    {"name":"addrMap7_2Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_3","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":32}},
    {"name":"addrMap7_3Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_4","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":64}},
    {"name":"addrMap7_4Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_5","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":128}},
    {"name":"addrMap7_5Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"addrMap7_6","arguments":[],"returnType":{"kind":"dict","key":"address","value":"uint","valueFormat":256}},
    {"name":"addrMap7_6Value","arguments":[{"name":"key","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"int","optional":true,"format":257}},
    {"name":"mapAsCell","arguments":[],"returnType":{"kind":"simple","type":"cell","optional":true}},
    {"name":"intMap1IsEmpty","arguments":[],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"intMap1Del","arguments":[{"name":"key","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
]

const MapTestContract_receivers: ABIReceiver[] = [
    {"receiver":"internal","message":{"kind":"empty"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap1"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap2"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap3"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap4"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap5"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap6"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetUIntMap7"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetIntMap8"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetUIntMap9"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap1"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap2"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap3"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap4"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap5"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap6"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelUIntMap7"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelIntMap8"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelUIntMap9"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap1"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap2"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap3"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap4"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap5"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap6"}},
    {"receiver":"internal","message":{"kind":"typed","type":"SetAddrMap7"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap1"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap2"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap3"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap4"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap5"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap6"}},
    {"receiver":"internal","message":{"kind":"typed","type":"DelAddrMap7"}},
    {"receiver":"internal","message":{"kind":"text","text":"reset"}},
]

export class MapTestContract implements Contract {
    
    static async init() {
        return await MapTestContract_init();
    }
    
    static async fromInit() {
        const init = await MapTestContract_init();
        const address = contractAddress(0, init);
        return new MapTestContract(address, init);
    }
    
    static fromAddress(address: Address) {
        return new MapTestContract(address);
    }
    
    readonly address: Address; 
    readonly init?: { code: Cell, data: Cell };
    readonly abi: ContractABI = {
        types:  MapTestContract_types,
        getters: MapTestContract_getters,
        receivers: MapTestContract_receivers,
        errors: MapTestContract_errors,
    };
    
    private constructor(address: Address, init?: { code: Cell, data: Cell }) {
        this.address = address;
        this.init = init;
    }
    
    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: null | SetIntMap1 | SetIntMap2 | SetIntMap3 | SetIntMap4 | SetIntMap5 | SetIntMap6 | SetUIntMap7 | SetIntMap8 | SetUIntMap9 | DelIntMap1 | DelIntMap2 | DelIntMap3 | DelIntMap4 | DelIntMap5 | DelIntMap6 | DelUIntMap7 | DelIntMap8 | DelUIntMap9 | SetAddrMap1 | SetAddrMap2 | SetAddrMap3 | SetAddrMap4 | SetAddrMap5 | SetAddrMap6 | SetAddrMap7 | DelAddrMap1 | DelAddrMap2 | DelAddrMap3 | DelAddrMap4 | DelAddrMap5 | DelAddrMap6 | DelAddrMap7 | 'reset') {
        
        let body: Cell | null = null;
        if (message === null) {
            body = new Cell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap1') {
            body = beginCell().store(storeSetIntMap1(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap2') {
            body = beginCell().store(storeSetIntMap2(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap3') {
            body = beginCell().store(storeSetIntMap3(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap4') {
            body = beginCell().store(storeSetIntMap4(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap5') {
            body = beginCell().store(storeSetIntMap5(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap6') {
            body = beginCell().store(storeSetIntMap6(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetUIntMap7') {
            body = beginCell().store(storeSetUIntMap7(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetIntMap8') {
            body = beginCell().store(storeSetIntMap8(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetUIntMap9') {
            body = beginCell().store(storeSetUIntMap9(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap1') {
            body = beginCell().store(storeDelIntMap1(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap2') {
            body = beginCell().store(storeDelIntMap2(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap3') {
            body = beginCell().store(storeDelIntMap3(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap4') {
            body = beginCell().store(storeDelIntMap4(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap5') {
            body = beginCell().store(storeDelIntMap5(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap6') {
            body = beginCell().store(storeDelIntMap6(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelUIntMap7') {
            body = beginCell().store(storeDelUIntMap7(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelIntMap8') {
            body = beginCell().store(storeDelIntMap8(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelUIntMap9') {
            body = beginCell().store(storeDelUIntMap9(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap1') {
            body = beginCell().store(storeSetAddrMap1(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap2') {
            body = beginCell().store(storeSetAddrMap2(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap3') {
            body = beginCell().store(storeSetAddrMap3(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap4') {
            body = beginCell().store(storeSetAddrMap4(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap5') {
            body = beginCell().store(storeSetAddrMap5(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap6') {
            body = beginCell().store(storeSetAddrMap6(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'SetAddrMap7') {
            body = beginCell().store(storeSetAddrMap7(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap1') {
            body = beginCell().store(storeDelAddrMap1(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap2') {
            body = beginCell().store(storeDelAddrMap2(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap3') {
            body = beginCell().store(storeDelAddrMap3(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap4') {
            body = beginCell().store(storeDelAddrMap4(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap5') {
            body = beginCell().store(storeDelAddrMap5(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap6') {
            body = beginCell().store(storeDelAddrMap6(message)).endCell();
        }
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'DelAddrMap7') {
            body = beginCell().store(storeDelAddrMap7(message)).endCell();
        }
        if (message === 'reset') {
            body = beginCell().storeUint(0, 32).storeStringTail(message).endCell();
        }
        if (body === null) { throw new Error('Invalid message type'); }
        
        await provider.internal(via, { ...args, body: body });
        
    }
    
    async getIntMap1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap1Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Bool(), source.readCellOpt());
        return result;
    }
    
    async getIntMap2Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap2Value', builder.build())).stack;
        let result = source.readBooleanOpt();
        return result;
    }
    
    async getIntMap3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Cell(), source.readCellOpt());
        return result;
    }
    
    async getIntMap3Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap3Value', builder.build())).stack;
        let result = source.readCellOpt();
        return result;
    }
    
    async getIntMap4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), dictValueParserSomeStruct(), source.readCellOpt());
        return result;
    }
    
    async getIntMap4Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap4Value', builder.build())).stack;
        const result_p = source.readTupleOpt();
        const result = result_p ? loadTupleSomeStruct(result_p) : null;
        return result;
    }
    
    async getIntMap5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Address(), source.readCellOpt());
        return result;
    }
    
    async getIntMap5Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap5Value', builder.build())).stack;
        let result = source.readAddressOpt();
        return result;
    }
    
    async getIntMap6_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Int(8), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_1Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Int(16), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_2Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Int(32), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_3Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(64), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_4Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(128), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_5Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(256), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_6Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap6_7(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap6_7', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap6_7Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap6_7Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Uint(8), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_1Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Uint(16), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_2Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Uint(32), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_3Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigUint(64), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_4Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigUint(128), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_5Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap7_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap7_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigUint(256), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap7_6Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap7_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Int(8), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_1Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Int(16), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_2Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Int(32), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_3Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(64), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_4Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(128), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_5Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(256), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_6Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap8_7(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap8_7', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getIntMap8_7Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap8_7Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Uint(8), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_1Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Uint(16), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_2Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.Uint(32), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_3Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigUint(64), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_4Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigUint(128), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_5Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap9_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap9_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.BigInt(257), Dictionary.Values.BigUint(256), source.readCellOpt());
        return result;
    }
    
    async getIntMap9_6Value(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap9_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getIntMap10Value(provider: ContractProvider, key: bigint, value: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        builder.writeNumber(value);
        let source = (await provider.get('intMap10Value', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getIntMap11Value(provider: ContractProvider, key: bigint, value: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        builder.writeNumber(value);
        let source = (await provider.get('intMap11Value', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getIntMap12Value(provider: ContractProvider, key: bigint, value: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        builder.writeNumber(value);
        let source = (await provider.get('intMap12Value', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getIntMap13Value(provider: ContractProvider, key: bigint, value: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        builder.writeNumber(value);
        let source = (await provider.get('intMap13Value', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getAddrMap1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getAddrMap1Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Bool(), source.readCellOpt());
        return result;
    }
    
    async getAddrMap2Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap2Value', builder.build())).stack;
        let result = source.readBooleanOpt();
        return result;
    }
    
    async getAddrMap3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Cell(), source.readCellOpt());
        return result;
    }
    
    async getAddrMap3Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap3Value', builder.build())).stack;
        let result = source.readCellOpt();
        return result;
    }
    
    async getAddrMap4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), dictValueParserSomeStruct(), source.readCellOpt());
        return result;
    }
    
    async getAddrMap4Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap4Value', builder.build())).stack;
        const result_p = source.readTupleOpt();
        const result = result_p ? loadTupleSomeStruct(result_p) : null;
        return result;
    }
    
    async getAddrMap5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Address(), source.readCellOpt());
        return result;
    }
    
    async getAddrMap5Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap5Value', builder.build())).stack;
        let result = source.readAddressOpt();
        return result;
    }
    
    async getAddrMap6_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Int(8), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_1Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Int(16), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_2Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Int(32), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_3Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigInt(64), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_4Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigInt(128), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_5Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigInt(256), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_6Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap6_7(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap6_7', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigInt(257), source.readCellOpt());
        return result;
    }
    
    async getAddrMap6_7Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap6_7Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_1', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Uint(8), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_1Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_1Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_2', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Uint(16), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_2Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_2Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_3', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.Uint(32), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_3Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_3Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_4', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigUint(64), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_4Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_4Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_5', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigUint(128), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_5Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_5Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getAddrMap7_6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('addrMap7_6', builder.build())).stack;
        let result = Dictionary.loadDirect(Dictionary.Keys.Address(), Dictionary.Values.BigUint(256), source.readCellOpt());
        return result;
    }
    
    async getAddrMap7_6Value(provider: ContractProvider, key: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(key);
        let source = (await provider.get('addrMap7_6Value', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    
    async getMapAsCell(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('mapAsCell', builder.build())).stack;
        let result = source.readCellOpt();
        return result;
    }
    
    async getIntMap1IsEmpty(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('intMap1IsEmpty', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIntMap1Del(provider: ContractProvider, key: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(key);
        let source = (await provider.get('intMap1Del', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
}