#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/messages.fc";
#include "imports/jetton-utils.fc";
#include "imports/op.fc";

global int seqno; ;; Prevnet replay attack
global int publicKey;
global slice ownerAddress;
global slice name;
global slice symbol;
const int min_ton_for_storage = 300000000;

;; Load storage of thid contract
() load_data() impure inline_ref {
    ;; Load contract storage cell and converts into slice.
    slice ds = get_data().begin_parse(); 
    ;; Populates storage variables.
    seqno = ds~load_uint(32);
    publicKey = ds~load_uint(256);
    ownerAddress = ds~load_msg_addr();
    name = "SWFT Swap1.1";
    symbol = "SSwap";

    ;; Checks if slice is empty. If not, throws an exception.
    ds.end_parse(); 
}


;; Store storage of this contract
() store_data(int seqno, int public_key, slice ownerAddress) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(public_key, 256)
            .store_slice(ownerAddress)
        .end_cell()
    );
}

{-
    get method:
        1. get_smc_balance
        2. get_seqno
        3. get_owner
-}
int get_smc_balance() method_id {
    [int balance, _] = get_balance(); ;; get_balance() returns tuple [(int)balance of TON, (cell)extra currency]
    return balance;
}

int get_seqno() method_id {
    load_data();
    return seqno;
}

int get_publicKey() method_id {
    load_data();
    return publicKey;
}

slice get_owner() method_id {
    load_data();
    return ownerAddress;
}
slice get_name() method_id {
    load_data();
    return name;
}
slice get_symbol() method_id {
    load_data();
    return symbol;
}

{-
    recv_internal() :
        1. Deposit
        2. Owner withdraw
        3. Change owner
        4. Transfer message to owner
-}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    ;; int query_id = in_msg_body~load_uint(64);
    if(op == transfer_notification) {
        cell ref_cs = in_msg_body~load_ref(); 
        slice ref_ds = ref_cs.begin_parse();
        int transferred_op = ref_ds~load_uint(32);
        slice reponse_address = ref_ds~load_msg_addr();
        int forward_amount = ref_ds~load_coins();
        if (transferred_op == swap) {
            send_simple_message(0,reponse_address,ref_ds~load_ref(),64);
            return ();
        }
        if (transferred_op == swapETH) {
            send_simple_message(forward_amount,reponse_address,ref_ds~load_ref(), 1);
            return ();
        }
        
    }
    throw_unless(411, equal_slices(sender_address, ownerAddress)); ;; Only owner can call change_owner() and withdraw()
     if (op == withdraw) {
        slice destination = in_msg_body~load_msg_addr();
        slice to_destination = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int forward_amount = in_msg_body~load_coins();
        slice either_forward_payload = in_msg_body;
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(destination)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(0, 64)
                .store_coins(jetton_amount)
                .store_slice(to_destination)
                .store_slice(ownerAddress)
                .store_coins(0)
                .store_slice(either_forward_payload)
                .end_cell())
            .end_cell();
        send_raw_message(msg, 64);
        send_simple_message(forward_amount, ownerAddress,in_msg_body~load_ref(), 1);
        return ();
    }

    ;; Withdraw Ton coins
    if (op == withdrawETH) {
        slice destination = in_msg_body~load_msg_addr();
        int withdraw_amount = in_msg_body~load_coins();
        throw_unless(412, get_smc_balance() >=  withdraw_amount); ;; Make sure the smc has enough balance
        int send_amount = min(withdraw_amount, my_balance - min_ton_for_storage);
        cell msg = begin_cell()
                .store_uint(0x18, 6) ;; nobounceable - 0x10, logs - 0x30
                .store_slice(destination) ;; withdraw to owner
                .store_coins(send_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();

        send_raw_message(msg, 1);
        send_simple_message(0, ownerAddress,in_msg_body~load_ref(), 64);
        return ();
    }
    ;; Change owner
    if (op == "change_owner"c) {
        slice new_owner_address = in_msg_body~load_msg_addr();
        force_chain(new_owner_address); ;; Make sure the new owner is a valid address
        store_data(seqno, publicKey, new_owner_address);
        return ();
    }

    throw(0xffffff); ;; Op not allowed
}
{-
    recv_external() :
        1. Selfdestruct
-}
() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    var hash = slice_hash(in_msg);

    load_data();

    throw_unless(401, check_signature(hash, signature, publicKey)); ;; Revert on wrong signature

    int msg_seqno = in_msg~load_uint(32);

    throw_unless(402, msg_seqno == seqno); ;; Revert if the sequence number of the incoming message does not match the stored sequence number
    accept_message();
    in_msg~touch(); ;;  If there is no remaining data in the slice, touch() will throw an exception.
    int op = in_msg~load_uint(32);
    if(op == "selfdestruct"c) {
        cell msg = begin_cell()
                .store_uint(0x18, 6) ;; nobounceable - 0x10, logs - 0x30
                .store_slice(ownerAddress) 
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 128 + 32); ;; This mode will destroy the contract
    }

    store_data(seqno + 1, publicKey, ownerAddress);
}
