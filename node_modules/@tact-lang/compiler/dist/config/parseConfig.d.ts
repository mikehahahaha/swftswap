import { z } from "zod";
declare const optionsSchema: z.ZodObject<{
    debug: z.ZodOptional<z.ZodBoolean>;
    masterchain: z.ZodOptional<z.ZodBoolean>;
    external: z.ZodOptional<z.ZodBoolean>;
    experimental: z.ZodOptional<z.ZodObject<{
        inline: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        inline?: boolean | undefined;
    }, {
        inline?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    debug?: boolean | undefined;
    masterchain?: boolean | undefined;
    external?: boolean | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
}, {
    debug?: boolean | undefined;
    masterchain?: boolean | undefined;
    external?: boolean | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
}>;
declare const projectSchema: z.ZodObject<{
    name: z.ZodString;
    path: z.ZodString;
    output: z.ZodString;
    options: z.ZodOptional<z.ZodObject<{
        debug: z.ZodOptional<z.ZodBoolean>;
        masterchain: z.ZodOptional<z.ZodBoolean>;
        external: z.ZodOptional<z.ZodBoolean>;
        experimental: z.ZodOptional<z.ZodObject<{
            inline: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            inline?: boolean | undefined;
        }, {
            inline?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    }, {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    }>>;
    mode: z.ZodOptional<z.ZodEnum<["full", "checkOnly", "funcOnly"]>>;
}, "strict", z.ZodTypeAny, {
    path: string;
    name: string;
    output: string;
    options?: {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    } | undefined;
    mode?: "full" | "checkOnly" | "funcOnly" | undefined;
}, {
    path: string;
    name: string;
    output: string;
    options?: {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    } | undefined;
    mode?: "full" | "checkOnly" | "funcOnly" | undefined;
}>;
declare const configSchema: z.ZodObject<{
    $schema: z.ZodOptional<z.ZodString>;
    projects: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        path: z.ZodString;
        output: z.ZodString;
        options: z.ZodOptional<z.ZodObject<{
            debug: z.ZodOptional<z.ZodBoolean>;
            masterchain: z.ZodOptional<z.ZodBoolean>;
            external: z.ZodOptional<z.ZodBoolean>;
            experimental: z.ZodOptional<z.ZodObject<{
                inline: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                inline?: boolean | undefined;
            }, {
                inline?: boolean | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        }, {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        }>>;
        mode: z.ZodOptional<z.ZodEnum<["full", "checkOnly", "funcOnly"]>>;
    }, "strict", z.ZodTypeAny, {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }, {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }[];
    $schema?: string | undefined;
}, {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }[];
    $schema?: string | undefined;
}>;
export type Config = z.infer<typeof configSchema>;
export type ConfigProject = z.infer<typeof projectSchema>;
export type Options = z.infer<typeof optionsSchema>;
export declare function parseConfig(src: string): {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }[];
    $schema?: string | undefined;
};
export declare function verifyConfig(config: Config): {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "full" | "checkOnly" | "funcOnly" | undefined;
    }[];
    $schema?: string | undefined;
};
export {};
