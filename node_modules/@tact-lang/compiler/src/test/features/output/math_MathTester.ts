import { 
    Cell,
    Slice, 
    Address, 
    Builder, 
    beginCell, 
    ComputeError, 
    TupleItem, 
    TupleReader, 
    Dictionary, 
    contractAddress, 
    ContractProvider, 
    Sender, 
    Contract, 
    ContractABI, 
    ABIType,
    ABIGetter,
    ABIReceiver,
    TupleBuilder,
    DictionaryValue
} from '@ton/core';

export type StateInit = {
    $$type: 'StateInit';
    code: Cell;
    data: Cell;
}

export function storeStateInit(src: StateInit) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}

export function loadStateInit(slice: Slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function loadTupleStateInit(source: TupleReader) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit' as const, code: _code, data: _data };
}

function storeTupleStateInit(source: StateInit) {
    let builder = new TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserStateInit(): DictionaryValue<StateInit> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    }
}

export type Context = {
    $$type: 'Context';
    bounced: boolean;
    sender: Address;
    value: bigint;
    raw: Cell;
}

export function storeContext(src: Context) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}

export function loadContext(slice: Slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function loadTupleContext(source: TupleReader) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context' as const, bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}

function storeTupleContext(source: Context) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}

function dictValueParserContext(): DictionaryValue<Context> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    }
}

export type SendParameters = {
    $$type: 'SendParameters';
    bounce: boolean;
    to: Address;
    value: bigint;
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
}

export function storeSendParameters(src: SendParameters) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) { b_0.storeBit(true).storeRef(src.body); } else { b_0.storeBit(false); }
        if (src.code !== null && src.code !== undefined) { b_0.storeBit(true).storeRef(src.code); } else { b_0.storeBit(false); }
        if (src.data !== null && src.data !== undefined) { b_0.storeBit(true).storeRef(src.data); } else { b_0.storeBit(false); }
    };
}

export function loadSendParameters(slice: Slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function loadTupleSendParameters(source: TupleReader) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters' as const, bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}

function storeTupleSendParameters(source: SendParameters) {
    let builder = new TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}

function dictValueParserSendParameters(): DictionaryValue<SendParameters> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    }
}

export type Deploy = {
    $$type: 'Deploy';
    queryId: bigint;
}

export function storeDeploy(src: Deploy) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2490013878, 32);
        b_0.storeUint(src.queryId, 64);
    };
}

export function loadDeploy(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2490013878) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'Deploy' as const, queryId: _queryId };
}

function loadTupleDeploy(source: TupleReader) {
    let _queryId = source.readBigNumber();
    return { $$type: 'Deploy' as const, queryId: _queryId };
}

function storeTupleDeploy(source: Deploy) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}

function dictValueParserDeploy(): DictionaryValue<Deploy> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadDeploy(src.loadRef().beginParse());
        }
    }
}

export type DeployOk = {
    $$type: 'DeployOk';
    queryId: bigint;
}

export function storeDeployOk(src: DeployOk) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(2952335191, 32);
        b_0.storeUint(src.queryId, 64);
    };
}

export function loadDeployOk(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2952335191) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'DeployOk' as const, queryId: _queryId };
}

function loadTupleDeployOk(source: TupleReader) {
    let _queryId = source.readBigNumber();
    return { $$type: 'DeployOk' as const, queryId: _queryId };
}

function storeTupleDeployOk(source: DeployOk) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}

function dictValueParserDeployOk(): DictionaryValue<DeployOk> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeDeployOk(src)).endCell());
        },
        parse: (src) => {
            return loadDeployOk(src.loadRef().beginParse());
        }
    }
}

export type FactoryDeploy = {
    $$type: 'FactoryDeploy';
    queryId: bigint;
    cashback: Address;
}

export function storeFactoryDeploy(src: FactoryDeploy) {
    return (builder: Builder) => {
        let b_0 = builder;
        b_0.storeUint(1829761339, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.cashback);
    };
}

export function loadFactoryDeploy(slice: Slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1829761339) { throw Error('Invalid prefix'); }
    let _queryId = sc_0.loadUintBig(64);
    let _cashback = sc_0.loadAddress();
    return { $$type: 'FactoryDeploy' as const, queryId: _queryId, cashback: _cashback };
}

function loadTupleFactoryDeploy(source: TupleReader) {
    let _queryId = source.readBigNumber();
    let _cashback = source.readAddress();
    return { $$type: 'FactoryDeploy' as const, queryId: _queryId, cashback: _cashback };
}

function storeTupleFactoryDeploy(source: FactoryDeploy) {
    let builder = new TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.cashback);
    return builder.build();
}

function dictValueParserFactoryDeploy(): DictionaryValue<FactoryDeploy> {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(beginCell().store(storeFactoryDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadFactoryDeploy(src.loadRef().beginParse());
        }
    }
}

 type MathTester_init_args = {
    $$type: 'MathTester_init_args';
}

function initMathTester_init_args(src: MathTester_init_args) {
    return (builder: Builder) => {
        let b_0 = builder;
    };
}

async function MathTester_init() {
    const __code = Cell.fromBase64('te6ccgEC6gEADHMAART/APSkE/S88sgLAQIBYgIDApLQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxZ2zzy4IIwyPhDAcx/AcoAye1U5wQCASAICQGKAZIwf+BwIddJwh+VMCDXCx/eghCUapi2uo6n0x8BghCUapi2uvLggdM/ATHIAYIQr/kPV1jLH8s/yfhCAXBt2zx/4DBwBQE6bW0ibrOZWyBu8tCAbyIBkTLiECRwAwSAQlAj2zwGAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7AAcAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwCASAKCwIBIBARAgEgDA0CASAODwIBIBYXAgEgJCUCASA8PQIBIFNUAgEgEhMCASAUFQIBIGprAgEghIUCASClpgIBIMbHAgEgGBkCASAfIAIRrxBtniztnhjA53cCASAaGwIQqyPbPFnbPDHnHAIBWB0eABIBIW6SW3+RveICD6J7bPFnbPDG56ECDaC/bPNs8MbnUgIRrwDtniztnhjA54MCASAhIgIQqwLbPFnbPDHnIwIQqr/bPFnbPDHnjgAQIW6SW3CRuuICASAmJwIBIC0uAgOWkCgpAgFuKywCD622zwB2zwxg5yoCD6w2zxZ2zwxg57MABrYDpQIPo3Ns8Wds8MbnwgINobds82zwxudSAgFqLzACASAyMwIPoaNs8Wds8MbnMQIPoEds8Wds8Mbn0AACsgIBWDQ1AgFYNzgCD6BDbPFnbPDG568CD6EDbPFnbPDG5zYAEgEhbpJbcJG64gIPo/ds8Wds8MbntAIBSDk6Ag+1u2eLO2eGMOfaAg2xm2ebZ4Yw5zsAAnQCASA+PwIBWEpLAgFYQEECASBDRAIPp4O2eLO2eGPnQgIPpy+2eLO2eGPnxQACsQIQq6fbPFnbPDHnRQIBIEZHAC4hbiFuXLCTXwRwmwGzAbOwkb2SW3/i4gIPpQu2eLO2eGPn1wIBIEhJAg+ga2zxZ2zwxufjAg2ir2zzbPDG57cCEKuG2zxZ2zwx50wCASBNTgACvAIBIE9QAg2nFbZ5tnhj51ICD6EbbPAHbPDG52gCD6A7bPFnbPDG51EAAq0ABIAMAgEgVVYCASBdXgIRrCFtniztnhjA51cCASBYWQAQAQH5AAH5ALoCEKvl2zxZ2zwx51oCASBbXAAQIW6SW3+RveICV6RKQN0kYNscOEGukwICF3XlwRBBrhYUQQIJ/3XloRMGE3XlwRHFtngDtnhj52gCDafTtnm2eGPneAIBSF9gAgEgY2QCo6TGQt0kYtscOgJBrpMCAhd15cEQQa4WFEECCf915aETBhN15cERxELdJGLbHDoCQa6TAgIXdeXBEEGuFhRBAgn/deWhEwYTdeXBEcW2eLO2eGPnYQIPpeG2eAO2eGPnYgAyIW4hblywk18Ef5wBswGzsJLHBZJbcOLiswACrgIQq8TbPFnbPDHnZQIBIGZnAC4hbiFuXLCTXwR/mwGzAbOwkbqSW3Di4gIPpAm2eAO2eGPnaAINp5G2ebZ4Y+dpAARuswACcAIBIGxtAgEgeXoCASBubwIPrxPtnm2eGMDneAIBIHBxAgEgc3QCk6cYQt0kYtscOgJBrpMCAhd15cEQQa4WFEECCf915aETBhN15cERxAJBrpMCAhd15cEQQa4WFEECCf915aETBhN15cERtniztnhj53ICD6d5tniztnhj5+YAFCFukltwkscF4rMCASB1dgIPplG2eLO2eGPndwIPoets8Wds8MbnwQJXoBiBukjBtjhwg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCI4ts8Ads8MbnoAAcIW6SW3CXAfkBAfkBuuIAAncCASB7fAIPrwNtnm2eGMDn6AKUqa0BINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiCFukjFtjh0BINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiOLbPFnbPDHnfQIBIH5/ABYBIW6SW3CSxwXiswIBIICBAg+mE7Z4s7Z4Y+eDAg+hb2zxZ2zwxueCAg+gn2zwB2zwxuegABABAfkAAfkAvQAeASFukltwlwH5AQH5AbriAgEghocCASCWlwIBIIiJAgEgj5AChKnOASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgBINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiNs8Wds8MeeKAgEgi4wACAHHBbMCD6Rxtniztnhj540CD6bVtniztnhj544AHgEhbpJbcJcB+QAB+QC64gAQAQH5AQH5Ab0CASCRkgIQqvHbPFnbPDHnlQIPpLm2eLO2eGPnkwIPpNO2eLO2eGPnlAACsAACvgACrAIBIJiZAgFmoqMCpKnvIW6SMW2OHQEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCI4iFukjFtjh0BINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiOLbPFnbPDHnmgIBIJucADAhbiFuXLCTXwR/nAGzAbOwkscFkltw4uICASCdngIPppe2eLO2eGPnoQIPoGds8Wds8MbnnwIPoZds8Ads8MbnoAAcIW6SW3CXAfkAAfkAuuIAAm4APCFuIW5csJNfBH+OEQGzAbOwlwH5AQH5AbqSW3Di4gIPoSNs8Wds8MbnpAC3o0YJwXOw9XSyuex6E7DnWSoUbZoJwndY1LStkfLMi068t/fFiOYJwIFXAG4BnY5TOWDquRyWyw4JwG9Sd75VFlvHHU9PeBVnDJoJwnZdOWrNOy3M6DpZtlGbopIAArkCASCnqAIBILq7AgEgqaoCASC1tgIBIKusAgEgsbICASCtrgAPpX3aiaGkAAMCD6GfbPFnbPDG568Ck6AghbpIxbY4dASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjiASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjbPFnbPDG57AAAqEAEiFukltwkscF4gIPpf22eLO2eGPnswIPp1m2eLO2eGPntAA8IW4hblywk18EcI4RAbMBs7CXAfkAAfkAvZJbf+LiABwhbpJbf5cB+QEB+QG94gIOqP7bPNs8Mee3AhCpbNs8Wds8Mee4AAJ1AQTbPLkAGCDC//KFcQGSIajkMQIBILy9AgFiw8QClKkpASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IghbpIxbY4dASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4Iji2zxZ2zwx574CASC/wAAUASFukltwkscF4gIPpb+2eLO2eGPnwQIPpxu2eLO2eGPnwgA8IW4hblywk18Ef44RAbMBs7CXAfkAAfkAupJbcOLiAB4BIW6SW3+XAfkBAfkBveICD6DHbPFnbPDG58UAc6LuNDVpcGZzOi8vUW1mRDRmaUxyd1lySG9uc2pjQ0RHVnVENGtGSzJ0QmpXd3lRdkxIMVgzZ0VLQYIAAqACASDIyQIBINvcAgEgyssCASDR0gKEqUoBINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCI2zxZ2zwx58wCASDNzgAGAccFAg+lebZ4s7Z4Y+fPAg+n3bZ4s7Z4Y+fQAB4BIW6SW3+XAfkAAfkAveIAEAEB+QEB+QG6AgFI09QCEKoM2zxZ2zwx59oCASDV1gIPoX9s8Wds8Mbn2AIPvI2zxZ2zwxjn1wINu82zzbPDGOfoAASpBAEE2zzZACpcuZJbcOBwk1MhvpZRIakEAqTobCEABKkIAgEg3d4CAcfk5QIQqWvbPFnbPDHn3wIBIODhAAK7Ag+lO7Z4s7Z4Y+fiAg+nn7Z4s7Z4Y+fjABwhbpJbf5cB+QAB+QC94gA8IW4hblywk18EcI4RAbMBs7CXAfkBAfkBvZJbf+LiAg+5rbPFnbPDGOfmAg253bPNs8MY5+gAAqgBNO1E0NQB+GPSADCRbeD4KNcLCoMJuvLgids86QACcwACbQ==');
    const __system = Cell.fromBase64('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');
    let builder = beginCell();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initMathTester_init_args({ $$type: 'MathTester_init_args' })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}

const MathTester_errors: { [key: number]: { message: string } } = {
    2: { message: `Stack undeflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
    137: { message: `Masterchain support is not enabled for this contract` },
}

const MathTester_types: ABIType[] = [
    {"name":"StateInit","header":null,"fields":[{"name":"code","type":{"kind":"simple","type":"cell","optional":false}},{"name":"data","type":{"kind":"simple","type":"cell","optional":false}}]},
    {"name":"Context","header":null,"fields":[{"name":"bounced","type":{"kind":"simple","type":"bool","optional":false}},{"name":"sender","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"raw","type":{"kind":"simple","type":"slice","optional":false}}]},
    {"name":"SendParameters","header":null,"fields":[{"name":"bounce","type":{"kind":"simple","type":"bool","optional":false}},{"name":"to","type":{"kind":"simple","type":"address","optional":false}},{"name":"value","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"mode","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"body","type":{"kind":"simple","type":"cell","optional":true}},{"name":"code","type":{"kind":"simple","type":"cell","optional":true}},{"name":"data","type":{"kind":"simple","type":"cell","optional":true}}]},
    {"name":"Deploy","header":2490013878,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}}]},
    {"name":"DeployOk","header":2952335191,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}}]},
    {"name":"FactoryDeploy","header":1829761339,"fields":[{"name":"queryId","type":{"kind":"simple","type":"uint","optional":false,"format":64}},{"name":"cashback","type":{"kind":"simple","type":"address","optional":false}}]},
]

const MathTester_getters: ABIGetter[] = [
    {"name":"add","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"sub","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mul","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"div","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mod","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"shr","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"shl","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"and","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"or","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"xor","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"addAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"subAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"mulAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"divAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"modAug","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"compare1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare2","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare3","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare4","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare5","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare6","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare7","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare8","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare9","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare10","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"b","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare11","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare12","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare13","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare14","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare15","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare16","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":false}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare17","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare18","arguments":[{"name":"a","type":{"kind":"simple","type":"address","optional":true}},{"name":"b","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare19","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare20","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare21","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare22","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare23","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare24","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":false}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare25","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare26","arguments":[{"name":"a","type":{"kind":"simple","type":"cell","optional":true}},{"name":"b","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare27","arguments":[{"name":"a","type":{"kind":"dict","key":"int","value":"int"}},{"name":"b","type":{"kind":"dict","key":"int","value":"int"}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare28","arguments":[{"name":"a","type":{"kind":"dict","key":"int","value":"int"}},{"name":"b","type":{"kind":"dict","key":"int","value":"int"}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare29","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare30","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare31","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare32","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare33","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare34","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":false}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare35","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare36","arguments":[{"name":"a","type":{"kind":"simple","type":"slice","optional":true}},{"name":"b","type":{"kind":"simple","type":"slice","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare37","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare38","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare39","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare40","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare41","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare42","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":false}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare43","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":false}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"compare44","arguments":[{"name":"a","type":{"kind":"simple","type":"string","optional":true}},{"name":"b","type":{"kind":"simple","type":"string","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull1","arguments":[{"name":"a","type":{"kind":"simple","type":"int","optional":true,"format":257}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull2","arguments":[{"name":"address","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull2","arguments":[{"name":"address","type":{"kind":"simple","type":"address","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNull3","arguments":[{"name":"cell","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"isNotNull3","arguments":[{"name":"cell","type":{"kind":"simple","type":"cell","optional":true}}],"returnType":{"kind":"simple","type":"bool","optional":false}},
    {"name":"log2","arguments":[{"name":"num","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"log","arguments":[{"name":"num","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"base","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"pow","arguments":[{"name":"base","type":{"kind":"simple","type":"int","optional":false,"format":257}},{"name":"exp","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"pow2","arguments":[{"name":"exp","type":{"kind":"simple","type":"int","optional":false,"format":257}}],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence1","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence2","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence3","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence4","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence5","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence6","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence7","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence8","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence9","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence10","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence11","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
    {"name":"precendence12","arguments":[],"returnType":{"kind":"simple","type":"int","optional":false,"format":257}},
]

const MathTester_receivers: ABIReceiver[] = [
    {"receiver":"internal","message":{"kind":"typed","type":"Deploy"}},
]

export class MathTester implements Contract {
    
    static async init() {
        return await MathTester_init();
    }
    
    static async fromInit() {
        const init = await MathTester_init();
        const address = contractAddress(0, init);
        return new MathTester(address, init);
    }
    
    static fromAddress(address: Address) {
        return new MathTester(address);
    }
    
    readonly address: Address; 
    readonly init?: { code: Cell, data: Cell };
    readonly abi: ContractABI = {
        types:  MathTester_types,
        getters: MathTester_getters,
        receivers: MathTester_receivers,
        errors: MathTester_errors,
    };
    
    private constructor(address: Address, init?: { code: Cell, data: Cell }) {
        this.address = address;
        this.init = init;
    }
    
    async send(provider: ContractProvider, via: Sender, args: { value: bigint, bounce?: boolean| null | undefined }, message: Deploy) {
        
        let body: Cell | null = null;
        if (message && typeof message === 'object' && !(message instanceof Slice) && message.$$type === 'Deploy') {
            body = beginCell().store(storeDeploy(message)).endCell();
        }
        if (body === null) { throw new Error('Invalid message type'); }
        
        await provider.internal(via, { ...args, body: body });
        
    }
    
    async getAdd(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('add', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getSub(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('sub', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMul(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mul', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getDiv(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('div', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMod(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mod', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getShr(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('shr', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getShl(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('shl', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getAnd(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('and', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getOr(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('or', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getXor(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('xor', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getAddAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('addAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getSubAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('subAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getMulAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('mulAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getDivAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('divAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getModAug(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('modAug', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getCompare1(provider: ContractProvider, a: bigint, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare2(provider: ContractProvider, a: bigint, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare3(provider: ContractProvider, a: bigint | null, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare4(provider: ContractProvider, a: bigint | null, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare4', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare5(provider: ContractProvider, a: bigint | null, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare5', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare6(provider: ContractProvider, a: bigint | null, b: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare6', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare7(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare7', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare8(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare8', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare9(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare9', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare10(provider: ContractProvider, a: bigint, b: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        builder.writeNumber(b);
        let source = (await provider.get('compare10', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare11(provider: ContractProvider, a: Address, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare11', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare12(provider: ContractProvider, a: Address, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare12', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare13(provider: ContractProvider, a: Address | null, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare13', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare14(provider: ContractProvider, a: Address | null, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare14', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare15(provider: ContractProvider, a: Address, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare15', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare16(provider: ContractProvider, a: Address, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare16', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare17(provider: ContractProvider, a: Address | null, b: Address) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare17', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare18(provider: ContractProvider, a: Address | null, b: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(a);
        builder.writeAddress(b);
        let source = (await provider.get('compare18', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare19(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare19', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare20(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare20', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare21(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare21', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare22(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare22', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare23(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare23', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare24(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare24', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare25(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare25', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare26(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(a);
        builder.writeCell(b);
        let source = (await provider.get('compare26', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare27(provider: ContractProvider, a: Dictionary<bigint, bigint>, b: Dictionary<bigint, bigint>) {
        let builder = new TupleBuilder();
        builder.writeCell(a.size > 0 ? beginCell().storeDictDirect(a, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        builder.writeCell(b.size > 0 ? beginCell().storeDictDirect(b, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        let source = (await provider.get('compare27', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare28(provider: ContractProvider, a: Dictionary<bigint, bigint>, b: Dictionary<bigint, bigint>) {
        let builder = new TupleBuilder();
        builder.writeCell(a.size > 0 ? beginCell().storeDictDirect(a, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        builder.writeCell(b.size > 0 ? beginCell().storeDictDirect(b, Dictionary.Keys.BigInt(257), Dictionary.Values.BigInt(257)).endCell() : null);
        let source = (await provider.get('compare28', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare29(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare29', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare30(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare30', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare31(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare31', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare32(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare32', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare33(provider: ContractProvider, a: Cell, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare33', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare34(provider: ContractProvider, a: Cell, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare34', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare35(provider: ContractProvider, a: Cell | null, b: Cell) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare35', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare36(provider: ContractProvider, a: Cell | null, b: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeSlice(a);
        builder.writeSlice(b);
        let source = (await provider.get('compare36', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare37(provider: ContractProvider, a: string, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare37', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare38(provider: ContractProvider, a: string, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare38', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare39(provider: ContractProvider, a: string | null, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare39', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare40(provider: ContractProvider, a: string | null, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare40', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare41(provider: ContractProvider, a: string, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare41', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare42(provider: ContractProvider, a: string, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare42', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare43(provider: ContractProvider, a: string | null, b: string) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare43', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getCompare44(provider: ContractProvider, a: string | null, b: string | null) {
        let builder = new TupleBuilder();
        builder.writeString(a);
        builder.writeString(b);
        let source = (await provider.get('compare44', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull1(provider: ContractProvider, a: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        let source = (await provider.get('isNull1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull1(provider: ContractProvider, a: bigint | null) {
        let builder = new TupleBuilder();
        builder.writeNumber(a);
        let source = (await provider.get('isNotNull1', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull2(provider: ContractProvider, address: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(address);
        let source = (await provider.get('isNull2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull2(provider: ContractProvider, address: Address | null) {
        let builder = new TupleBuilder();
        builder.writeAddress(address);
        let source = (await provider.get('isNotNull2', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNull3(provider: ContractProvider, cell: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(cell);
        let source = (await provider.get('isNull3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getIsNotNull3(provider: ContractProvider, cell: Cell | null) {
        let builder = new TupleBuilder();
        builder.writeCell(cell);
        let source = (await provider.get('isNotNull3', builder.build())).stack;
        let result = source.readBoolean();
        return result;
    }
    
    async getLog2(provider: ContractProvider, num: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(num);
        let source = (await provider.get('log2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getLog(provider: ContractProvider, num: bigint, base: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(num);
        builder.writeNumber(base);
        let source = (await provider.get('log', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPow(provider: ContractProvider, base: bigint, exp: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(base);
        builder.writeNumber(exp);
        let source = (await provider.get('pow', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPow2(provider: ContractProvider, exp: bigint) {
        let builder = new TupleBuilder();
        builder.writeNumber(exp);
        let source = (await provider.get('pow2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence1(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence1', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence2(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence2', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence3(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence3', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence4(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence4', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence5(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence5', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence6(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence6', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence7(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence7', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence8(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence8', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence9(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence9', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence10(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence10', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence11(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence11', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
    async getPrecendence12(provider: ContractProvider) {
        let builder = new TupleBuilder();
        let source = (await provider.get('precendence12', builder.build())).stack;
        let result = source.readBigNumber();
        return result;
    }
    
}