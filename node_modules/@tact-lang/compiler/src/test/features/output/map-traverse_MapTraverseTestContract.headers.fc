;;
;; Header files for MapTraverseTestContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_min_int_int
(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_int_int
(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_min_int_cell
(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline;

;; __tact_dict_next_int_cell
(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_min_int_slice
(int, slice, int) __tact_dict_min_int_slice(cell d, int kl) inline;

;; __tact_dict_next_int_slice
(int, slice, int) __tact_dict_next_int_slice(cell d, int kl, int pivot) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_min_slice_int
(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_slice_int
(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_min_slice_cell
(slice, cell, int) __tact_dict_min_slice_cell(cell d, int kl) inline;

;; __tact_dict_next_slice_cell
(slice, cell, int) __tact_dict_next_slice_cell(cell d, int kl, slice pivot) inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_min_slice_slice
(slice, slice, int) __tact_dict_min_slice_slice(cell d, int kl) inline;

;; __tact_dict_next_slice_slice
(slice, slice, int) __tact_dict_next_slice_slice(cell d, int kl, slice pivot) inline;

;; $MyStruct$_store
builder $MyStruct$_store(builder build_0, (int, int) v) inline;

;; $MyStruct$_store_cell
cell $MyStruct$_store_cell((int, int) v) inline;

;; $MyStruct$_load
(slice, ((int, int))) $MyStruct$_load(slice sc_0) inline;

;; $MyStruct$_as_optional
tuple $MyStruct$_as_optional((int, int) v) inline;

;; $MyStruct$_load_opt
tuple $MyStruct$_load_opt(cell cl) inline;

;; $MyStruct$_not_null
((int, int)) $MyStruct$_not_null(tuple v) inline;

;; $MapTraverseTestContract$_contract_init
tuple $MapTraverseTestContract$_contract_init() impure inline_ref;

;; $MapTraverseTestContract$_contract_load
tuple $MapTraverseTestContract$_contract_load() impure inline_ref;

;; $MapTraverseTestContract$_contract_store
() $MapTraverseTestContract$_contract_store(tuple v) impure inline;

;; $MapTraverseTestContract$_fun_test_int_int
(tuple, int) $MapTraverseTestContract$_fun_test_int_int(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_int_bool
(tuple, int) $MapTraverseTestContract$_fun_test_int_bool(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_int_cell
(tuple, int) $MapTraverseTestContract$_fun_test_int_cell(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_int_address
(tuple, int) $MapTraverseTestContract$_fun_test_int_address(tuple $self) impure inline_ref;

;; $MyStruct$_constructor_a_b
((int, int)) $MyStruct$_constructor_a_b(int a, int b) inline;

;; $MapTraverseTestContract$_fun_test_int_struct
(tuple, int) $MapTraverseTestContract$_fun_test_int_struct(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_address_int
(tuple, int) $MapTraverseTestContract$_fun_test_address_int(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_address_bool
(tuple, int) $MapTraverseTestContract$_fun_test_address_bool(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_address_cell
(tuple, int) $MapTraverseTestContract$_fun_test_address_cell(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_address_address
(tuple, int) $MapTraverseTestContract$_fun_test_address_address(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_address_struct
(tuple, int) $MapTraverseTestContract$_fun_test_address_struct(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_empty_map
(tuple, int) $MapTraverseTestContract$_fun_test_empty_map(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_null
(tuple, int) $MapTraverseTestContract$_fun_test_null(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_map_modification_during_traversal1
(tuple, int) $MapTraverseTestContract$_fun_test_map_modification_during_traversal1(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_map_modification_during_traversal2
(tuple, ()) $MapTraverseTestContract$_fun_test_map_modification_during_traversal2(tuple $self) impure inline_ref;

;; $MapTraverseTestContract$_fun_test_map_size
(tuple, int) $MapTraverseTestContract$_fun_test_map_size(tuple $self) impure inline_ref;
