#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "map-traverse_MapTraverseTestContract.headers.fc";
#include "map-traverse_MapTraverseTestContract.stdlib.fc";
#include "map-traverse_MapTraverseTestContract.storage.fc";

;;
;; Contract MapTraverseTestContract functions
;;

tuple $MapTraverseTestContract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, int) $MapTraverseTestContract$_fun_test_int_int(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_int(257, 1, 100, 257);
    $m~__tact_dict_set_int_int(257, 2, 200, 257);
    $m~__tact_dict_set_int_int(257, 3, 300, 257);
    $m~__tact_dict_set_int_int(257, 4, 400, 257);
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_0) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_0) {
        $sum1 = $sum1 + $k;
        $sum2 = $sum2 + $v;
        ($k, $v, $fresh$flag_0) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_int_bool(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_int(257, 1, true, 1);
    $m~__tact_dict_set_int_int(257, 2, false, 1);
    $m~__tact_dict_set_int_int(257, 3, true, 1);
    $m~__tact_dict_set_int_int(257, 4, false, 1);
    int $sum11 = 0;
    int $sum12 = 0;
    int $sum21 = 0;
    var ($k, $v, $fresh$flag_1) = __tact_dict_min_int_int($m, 257, 1);
    while ($fresh$flag_1) {
        if ($v) {
            $sum11 = $sum11 + $k;
            $sum12 = $sum12 + 1;
        } else {
            $sum21 = $sum21 + $k;
        }
        ($k, $v, $fresh$flag_1) = __tact_dict_next_int_int($m, 257, $k, 1);
    }
    return ($self, (($sum11 + $sum12) + $sum21));
}

(tuple, int) $MapTraverseTestContract$_fun_test_int_cell(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_cell(257, 1, end_cell(store_uint(begin_cell(), 100, 16)));
    $m~__tact_dict_set_int_cell(257, 2, end_cell(store_uint(begin_cell(), 200, 16)));
    $m~__tact_dict_set_int_cell(257, 3, end_cell(store_uint(begin_cell(), 300, 16)));
    $m~__tact_dict_set_int_cell(257, 4, end_cell(store_uint(begin_cell(), 400, 16)));
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_2) = __tact_dict_min_int_cell($m, 257);
    while ($fresh$flag_2) {
        slice $s = begin_parse($v);
        $sum1 = $sum1 + $k;
        $sum2 = $sum2 + $s~load_uint(16);
        ($k, $v, $fresh$flag_2) = __tact_dict_next_int_cell($m, 257, $k);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_int_address(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_slice(257, 1, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915));
    $m~__tact_dict_set_int_slice(257, 2, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916));
    $m~__tact_dict_set_int_slice(257, 3, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917));
    $m~__tact_dict_set_int_slice(257, 4, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918));
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_3) = __tact_dict_min_int_slice($m, 257);
    while ($fresh$flag_3) {
        slice $s = begin_parse(end_cell(__tact_store_address(begin_cell(), $v)));
        $s~skip_bits(264);
        $sum1 = $sum1 + $k;
        $sum2 = $sum2 + $s~load_uint(3);
        ($k, $v, $fresh$flag_3) = __tact_dict_next_int_slice($m, 257, $k);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_int_struct(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_cell(257, 1, $MyStruct$_store_cell($MyStruct$_constructor_a_b(100, true)));
    $m~__tact_dict_set_int_cell(257, 2, $MyStruct$_store_cell($MyStruct$_constructor_a_b(200, false)));
    $m~__tact_dict_set_int_cell(257, 3, $MyStruct$_store_cell($MyStruct$_constructor_a_b(300, true)));
    $m~__tact_dict_set_int_cell(257, 4, $MyStruct$_store_cell($MyStruct$_constructor_a_b(400, false)));
    int $sum11 = 0;
    int $sum12 = 0;
    int $sum21 = 0;
    int $sum22 = 0;
    var ($k, $v, $fresh$flag_4) = __tact_dict_min_int_cell($m, 257);
    while ($fresh$flag_4) {
        var ($v'a, $v'b) = $MyStruct$_not_null($MyStruct$_load_opt($v));
        if ($v'b) {
            $sum11 = $sum11 + $k;
            $sum12 = $sum12 + $v'a;
        } else {
            $sum21 = $sum21 + $k;
            $sum22 = $sum22 + $v'a;
        }
        ($k, $v, $fresh$flag_4) = __tact_dict_next_int_cell($m, 257, $k);
    }
    return ($self, ((($sum11 + $sum12) + $sum21) + $sum22));
}

(tuple, int) $MapTraverseTestContract$_fun_test_address_int(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915), 100, 257);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916), 200, 257);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917), 300, 257);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918), 400, 257);
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_5) = __tact_dict_min_slice_int($m, 267, 257);
    while ($fresh$flag_5) {
        slice $s = begin_parse(end_cell(__tact_store_address(begin_cell(), $k)));
        $s~skip_bits(264);
        $sum1 = $sum1 + $s~load_uint(3);
        $sum2 = $sum2 + $v;
        ($k, $v, $fresh$flag_5) = __tact_dict_next_slice_int($m, 267, $k, 257);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_address_bool(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915), true, 1);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916), false, 1);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917), true, 1);
    $m~__tact_dict_set_slice_int(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918), false, 1);
    int $sum11 = 0;
    int $sum12 = 0;
    int $sum21 = 0;
    var ($k, $v, $fresh$flag_6) = __tact_dict_min_slice_int($m, 267, 1);
    while ($fresh$flag_6) {
        slice $s = begin_parse(end_cell(__tact_store_address(begin_cell(), $k)));
        $s~skip_bits(264);
        if ($v) {
            $sum11 = $sum11 + $s~load_uint(3);
            $sum12 = $sum12 + 1;
        } else {
            $sum21 = $sum21 + $s~load_uint(3);
        }
        ($k, $v, $fresh$flag_6) = __tact_dict_next_slice_int($m, 267, $k, 1);
    }
    return ($self, (($sum11 + $sum12) + $sum21));
}

(tuple, int) $MapTraverseTestContract$_fun_test_address_cell(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915), end_cell(store_uint(begin_cell(), 100, 16)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916), end_cell(store_uint(begin_cell(), 200, 16)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917), end_cell(store_uint(begin_cell(), 300, 16)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918), end_cell(store_uint(begin_cell(), 400, 16)));
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_7) = __tact_dict_min_slice_cell($m, 267);
    while ($fresh$flag_7) {
        slice $s = begin_parse(end_cell(__tact_store_address(begin_cell(), $k)));
        $s~skip_bits(264);
        $sum1 = $sum1 + $s~load_uint(3);
        slice $vs = begin_parse($v);
        $sum2 = $sum2 + $vs~load_uint(16);
        ($k, $v, $fresh$flag_7) = __tact_dict_next_slice_cell($m, 267, $k);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_address_address(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_slice_slice(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915), __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916));
    $m~__tact_dict_set_slice_slice(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917), __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918));
    $m~__tact_dict_set_slice_slice(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540919), __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540920));
    $m~__tact_dict_set_slice_slice(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540921), __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540928));
    int $sum1 = 0;
    int $sum2 = 0;
    var ($k, $v, $fresh$flag_8) = __tact_dict_min_slice_slice($m, 267);
    while ($fresh$flag_8) {
        slice $s1 = begin_parse(end_cell(__tact_store_address(begin_cell(), $k)));
        $s1~skip_bits(264);
        $sum1 = $sum1 + $s1~load_uint(3);
        slice $s2 = begin_parse(end_cell(__tact_store_address(begin_cell(), $v)));
        $s2~skip_bits(264);
        $sum2 = $sum2 + $s2~load_uint(3);
        ($k, $v, $fresh$flag_8) = __tact_dict_next_slice_slice($m, 267, $k);
    }
    return ($self, ($sum1 + $sum2));
}

(tuple, int) $MapTraverseTestContract$_fun_test_address_struct(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540915), $MyStruct$_store_cell($MyStruct$_constructor_a_b(100, true)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540916), $MyStruct$_store_cell($MyStruct$_constructor_a_b(200, false)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540917), $MyStruct$_store_cell($MyStruct$_constructor_a_b(300, true)));
    $m~__tact_dict_set_slice_cell(267, __tact_create_address(0, 33699850868197080662997955796879821198672787310199343536838851068189998540918), $MyStruct$_store_cell($MyStruct$_constructor_a_b(400, false)));
    int $sum11 = 0;
    int $sum12 = 0;
    int $sum21 = 0;
    int $sum22 = 0;
    var ($k, $v, $fresh$flag_9) = __tact_dict_min_slice_cell($m, 267);
    while ($fresh$flag_9) {
        var ($v'a, $v'b) = $MyStruct$_not_null($MyStruct$_load_opt($v));
        slice $s = begin_parse(end_cell(__tact_store_address(begin_cell(), $k)));
        $s~skip_bits(264);
        if ($v'b) {
            $sum11 = $sum11 + $s~load_uint(3);
            $sum12 = $sum12 + $v'a;
        } else {
            $sum21 = $sum21 + $s~load_uint(3);
            $sum22 = $sum22 + $v'a;
        }
        ($k, $v, $fresh$flag_9) = __tact_dict_next_slice_cell($m, 267, $k);
    }
    return ($self, ((($sum11 + $sum12) + $sum21) + $sum22));
}

(tuple, int) $MapTraverseTestContract$_fun_test_empty_map(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    int $sum = 0;
    var ($k, $v, $fresh$flag_10) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_10) {
        return ($self, 42);
        ($k, $v, $fresh$flag_10) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, $sum);
}

(tuple, int) $MapTraverseTestContract$_fun_test_null(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    int $sum = 0;
    var ($k, $v, $fresh$flag_11) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_11) {
        return ($self, 42);
        ($k, $v, $fresh$flag_11) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, $sum);
}

(tuple, int) $MapTraverseTestContract$_fun_test_map_modification_during_traversal1(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_int(257, 1, 100, 257);
    $m~__tact_dict_set_int_int(257, 2, 200, 257);
    $m~__tact_dict_set_int_int(257, 3, 300, 257);
    $m~__tact_dict_set_int_int(257, 4, 400, 257);
    int $sum = 0;
    var ($k, $v, $fresh$flag_12) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_12) {
        $m~__tact_dict_delete_int(257, 2);
        $sum = $sum + ($k + $v);
        ($k, $v, $fresh$flag_12) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, $sum);
}

(tuple, ()) $MapTraverseTestContract$_fun_test_map_modification_during_traversal2(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_int(257, 1, 100, 257);
    int $sum = 0;
    var ($k, $v, $fresh$flag_13) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_13) {
        $m~__tact_dict_set_int_int(257, ($k + 1), ($v + 1), 257);
        ($k, $v, $fresh$flag_13) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, ());
}

(tuple, int) $MapTraverseTestContract$_fun_test_map_size(tuple $self) impure inline_ref {
    var ($self) = $self;
    cell $m = null();
    $m~__tact_dict_set_int_int(257, 1, 100, 257);
    $m~__tact_dict_set_int_int(257, 2, 200, 257);
    $m~__tact_dict_set_int_int(257, 3, 300, 257);
    $m~__tact_dict_set_int_int(257, 4, 400, 257);
    int $size = 0;
    var ($k, $v, $fresh$flag_14) = __tact_dict_min_int_int($m, 257, 257);
    while ($fresh$flag_14) {
        $size = $size + 1;
        ($k, $v, $fresh$flag_14) = __tact_dict_next_int_int($m, 257, $k, 257);
    }
    return ($self, $size);
}

;;
;; Receivers of a Contract MapTraverseTestContract
;;

((tuple), ()) %$MapTraverseTestContract$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

;;
;; Get methods of a Contract MapTraverseTestContract
;;

_ %test_int_int() method_id(115949) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_int_int();
    return res;
}

_ %test_int_bool() method_id(77636) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_int_bool();
    return res;
}

_ %test_int_cell() method_id(117602) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_int_cell();
    return res;
}

_ %test_int_address() method_id(83640) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_int_address();
    return res;
}

_ %test_int_struct() method_id(79520) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_int_struct();
    return res;
}

_ %test_address_int() method_id(65769) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_address_int();
    return res;
}

_ %test_address_bool() method_id(111244) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_address_bool();
    return res;
}

_ %test_address_cell() method_id(87722) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_address_cell();
    return res;
}

_ %test_address_address() method_id(123693) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_address_address();
    return res;
}

_ %test_address_struct() method_id(65619) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_address_struct();
    return res;
}

_ %test_empty_map() method_id(96611) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_empty_map();
    return res;
}

_ %test_null() method_id(112186) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_null();
    return res;
}

_ %test_map_modification_during_traversal1() method_id(104258) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_map_modification_during_traversal1();
    return res;
}

_ %test_map_modification_during_traversal2() method_id(108321) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_map_modification_during_traversal2();
    return res;
}

_ %test_map_size() method_id(73341) {
    var self = $MapTraverseTestContract$_contract_load();
    var res = self~$MapTraverseTestContract$_fun_test_map_size();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmci1RT2CYDxfWrEVGE19rTV2Aaxuz9izHHyr6HnNHEcCr";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MapTraverseTestContract
;;

(tuple, int) $MapTraverseTestContract$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$MapTraverseTestContract$_internal_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MapTraverseTestContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$MapTraverseTestContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MapTraverseTestContract$_contract_store(self);
}
