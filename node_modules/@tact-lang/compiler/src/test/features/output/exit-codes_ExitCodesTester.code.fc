#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "exit-codes_ExitCodesTester.headers.fc";
#include "exit-codes_ExitCodesTester.stdlib.fc";
#include "exit-codes_ExitCodesTester.storage.fc";

;;
;; Contract ExitCodesTester functions
;;

(int) $ExitCodesTester$_contract_init() impure inline_ref {
    var (($self'u8)) = (255);
    return ($self'u8);
}

((int), int) $ExitCodesTester$_fun_read_u8((int) $self) impure inline_ref {
    var (($self'u8)) = $self;
    return (($self'u8), $self'u8);
}

;;
;; Receivers of a Contract ExitCodesTester
;;

(((int)), ()) %$ExitCodesTester$_internal_empty((int) $self) impure inline {
    var ($self'u8) = $self;
    return (($self'u8), ());
}

((int), ()) $ExitCodesTester$_internal_text_8eeaac3eae106680a3f109673867a0c7f0f08b927a401c02b7daf6e857b65be4((int) $self) impure inline {
    var ($self'u8) = $self;
    throw(142);
    return (($self'u8), ());
}

((int), ()) $ExitCodesTester$_internal_text_656999149eb43f9255d1ff8b6400d7380277ac68d7f7a787bc5d754b74205475((int) $self) impure inline {
    var ($self'u8) = $self;
    $self'u8 = $self'u8 + 1;
    return (($self'u8), ());
}

;;
;; Get methods of a Contract ExitCodesTester
;;

_ %read_u8() method_id(125501) {
    var self = $ExitCodesTester$_contract_load();
    var res = self~$ExitCodesTester$_fun_read_u8();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmY7SQTJxbzV6AMkicz4FKWZsCfmrnfK1vv8NYf5vvgkfa";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract ExitCodesTester
;;

((int), int) $ExitCodesTester$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$ExitCodesTester$_internal_empty();
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "throw" message
        if (text_op == 0x8eeaac3eae106680a3f109673867a0c7f0f08b927a401c02b7daf6e857b65be4) {
            self~$ExitCodesTester$_internal_text_8eeaac3eae106680a3f109673867a0c7f0f08b927a401c02b7daf6e857b65be4();
            return (self, true);
        }
        
        ;; Receive "storage-overflow" message
        if (text_op == 0x656999149eb43f9255d1ff8b6400d7380277ac68d7f7a787bc5d754b74205475) {
            self~$ExitCodesTester$_internal_text_656999149eb43f9255d1ff8b6400d7380277ac68d7f7a787bc5d754b74205475();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $ExitCodesTester$_contract_load();
    
    ;; Handle operation
    int handled = self~$ExitCodesTester$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $ExitCodesTester$_contract_store(self);
}
