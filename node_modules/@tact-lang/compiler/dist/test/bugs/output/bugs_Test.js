"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = exports.loadChangeOwnerOk = exports.storeChangeOwnerOk = exports.loadChangeOwner = exports.storeChangeOwner = exports.loadFactoryDeploy = exports.storeFactoryDeploy = exports.loadDeployOk = exports.storeDeployOk = exports.loadDeploy = exports.storeDeploy = exports.loadJettonWalletData = exports.storeJettonWalletData = exports.loadTokenUpdateContent = exports.storeTokenUpdateContent = exports.loadTokenExcesses = exports.storeTokenExcesses = exports.loadTokenBurnNotification = exports.storeTokenBurnNotification = exports.loadTokenBurn = exports.storeTokenBurn = exports.loadTokenNotification = exports.storeTokenNotification = exports.loadTokenTransferInternal = exports.storeTokenTransferInternal = exports.loadTokenTransfer = exports.storeTokenTransfer = exports.loadJettonData = exports.storeJettonData = exports.loadMint = exports.storeMint = exports.loadReplace = exports.storeReplace = exports.loadTokenInfo = exports.storeTokenInfo = exports.loadSendParameters = exports.storeSendParameters = exports.loadContext = exports.storeContext = exports.loadStateInit = exports.storeStateInit = void 0;
const core_1 = require("@ton/core");
function storeStateInit(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}
exports.storeStateInit = storeStateInit;
function loadStateInit(slice) {
    let sc_0 = slice;
    let _code = sc_0.loadRef();
    let _data = sc_0.loadRef();
    return { $$type: 'StateInit', code: _code, data: _data };
}
exports.loadStateInit = loadStateInit;
function loadTupleStateInit(source) {
    let _code = source.readCell();
    let _data = source.readCell();
    return { $$type: 'StateInit', code: _code, data: _data };
}
function storeTupleStateInit(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserStateInit() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeStateInit(src)).endCell());
        },
        parse: (src) => {
            return loadStateInit(src.loadRef().beginParse());
        }
    };
}
function storeContext(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}
exports.storeContext = storeContext;
function loadContext(slice) {
    let sc_0 = slice;
    let _bounced = sc_0.loadBit();
    let _sender = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _raw = sc_0.loadRef();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
exports.loadContext = loadContext;
function loadTupleContext(source) {
    let _bounced = source.readBoolean();
    let _sender = source.readAddress();
    let _value = source.readBigNumber();
    let _raw = source.readCell();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
function storeTupleContext(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}
function dictValueParserContext() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeContext(src)).endCell());
        },
        parse: (src) => {
            return loadContext(src.loadRef().beginParse());
        }
    };
}
function storeSendParameters(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) {
            b_0.storeBit(true).storeRef(src.body);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.code !== null && src.code !== undefined) {
            b_0.storeBit(true).storeRef(src.code);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.data !== null && src.data !== undefined) {
            b_0.storeBit(true).storeRef(src.data);
        }
        else {
            b_0.storeBit(false);
        }
    };
}
exports.storeSendParameters = storeSendParameters;
function loadSendParameters(slice) {
    let sc_0 = slice;
    let _bounce = sc_0.loadBit();
    let _to = sc_0.loadAddress();
    let _value = sc_0.loadIntBig(257);
    let _mode = sc_0.loadIntBig(257);
    let _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
exports.loadSendParameters = loadSendParameters;
function loadTupleSendParameters(source) {
    let _bounce = source.readBoolean();
    let _to = source.readAddress();
    let _value = source.readBigNumber();
    let _mode = source.readBigNumber();
    let _body = source.readCellOpt();
    let _code = source.readCellOpt();
    let _data = source.readCellOpt();
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
function storeTupleSendParameters(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserSendParameters() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeSendParameters(src)).endCell());
        },
        parse: (src) => {
            return loadSendParameters(src.loadRef().beginParse());
        }
    };
}
function storeTokenInfo(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeStringRefTail(src.ticker);
        b_0.storeInt(src.decimals, 257);
    };
}
exports.storeTokenInfo = storeTokenInfo;
function loadTokenInfo(slice) {
    let sc_0 = slice;
    let _ticker = sc_0.loadStringRefTail();
    let _decimals = sc_0.loadIntBig(257);
    return { $$type: 'TokenInfo', ticker: _ticker, decimals: _decimals };
}
exports.loadTokenInfo = loadTokenInfo;
function loadTupleTokenInfo(source) {
    let _ticker = source.readString();
    let _decimals = source.readBigNumber();
    return { $$type: 'TokenInfo', ticker: _ticker, decimals: _decimals };
}
function storeTupleTokenInfo(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeString(source.ticker);
    builder.writeNumber(source.decimals);
    return builder.build();
}
function dictValueParserTokenInfo() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenInfo(src)).endCell());
        },
        parse: (src) => {
            return loadTokenInfo(src.loadRef().beginParse());
        }
    };
}
function storeReplace(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(1384510466, 32);
        b_0.storeDict(src.items, core_1.Dictionary.Keys.BigInt(257), core_1.Dictionary.Values.Address());
    };
}
exports.storeReplace = storeReplace;
function loadReplace(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1384510466) {
        throw Error('Invalid prefix');
    }
    let _items = core_1.Dictionary.load(core_1.Dictionary.Keys.BigInt(257), core_1.Dictionary.Values.Address(), sc_0);
    return { $$type: 'Replace', items: _items };
}
exports.loadReplace = loadReplace;
function loadTupleReplace(source) {
    let _items = core_1.Dictionary.loadDirect(core_1.Dictionary.Keys.BigInt(257), core_1.Dictionary.Values.Address(), source.readCellOpt());
    return { $$type: 'Replace', items: _items };
}
function storeTupleReplace(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeCell(source.items.size > 0 ? (0, core_1.beginCell)().storeDictDirect(source.items, core_1.Dictionary.Keys.BigInt(257), core_1.Dictionary.Values.Address()).endCell() : null);
    return builder.build();
}
function dictValueParserReplace() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeReplace(src)).endCell());
        },
        parse: (src) => {
            return loadReplace(src.loadRef().beginParse());
        }
    };
}
function storeMint(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(4235234258, 32);
        b_0.storeInt(src.amount, 257);
        b_0.storeAddress(src.receiver);
    };
}
exports.storeMint = storeMint;
function loadMint(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 4235234258) {
        throw Error('Invalid prefix');
    }
    let _amount = sc_0.loadIntBig(257);
    let _receiver = sc_0.loadAddress();
    return { $$type: 'Mint', amount: _amount, receiver: _receiver };
}
exports.loadMint = loadMint;
function loadTupleMint(source) {
    let _amount = source.readBigNumber();
    let _receiver = source.readAddress();
    return { $$type: 'Mint', amount: _amount, receiver: _receiver };
}
function storeTupleMint(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.amount);
    builder.writeAddress(source.receiver);
    return builder.build();
}
function dictValueParserMint() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeMint(src)).endCell());
        },
        parse: (src) => {
            return loadMint(src.loadRef().beginParse());
        }
    };
}
function storeJettonData(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeInt(src.totalSupply, 257);
        b_0.storeBit(src.mintable);
        b_0.storeAddress(src.owner);
        b_0.storeRef(src.content);
        b_0.storeRef(src.walletCode);
    };
}
exports.storeJettonData = storeJettonData;
function loadJettonData(slice) {
    let sc_0 = slice;
    let _totalSupply = sc_0.loadIntBig(257);
    let _mintable = sc_0.loadBit();
    let _owner = sc_0.loadAddress();
    let _content = sc_0.loadRef();
    let _walletCode = sc_0.loadRef();
    return { $$type: 'JettonData', totalSupply: _totalSupply, mintable: _mintable, owner: _owner, content: _content, walletCode: _walletCode };
}
exports.loadJettonData = loadJettonData;
function loadTupleJettonData(source) {
    let _totalSupply = source.readBigNumber();
    let _mintable = source.readBoolean();
    let _owner = source.readAddress();
    let _content = source.readCell();
    let _walletCode = source.readCell();
    return { $$type: 'JettonData', totalSupply: _totalSupply, mintable: _mintable, owner: _owner, content: _content, walletCode: _walletCode };
}
function storeTupleJettonData(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.totalSupply);
    builder.writeBoolean(source.mintable);
    builder.writeAddress(source.owner);
    builder.writeCell(source.content);
    builder.writeCell(source.walletCode);
    return builder.build();
}
function dictValueParserJettonData() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeJettonData(src)).endCell());
        },
        parse: (src) => {
            return loadJettonData(src.loadRef().beginParse());
        }
    };
}
function storeTokenTransfer(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(260734629, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.destination);
        b_0.storeAddress(src.response_destination);
        if (src.custom_payload !== null && src.custom_payload !== undefined) {
            b_0.storeBit(true).storeRef(src.custom_payload);
        }
        else {
            b_0.storeBit(false);
        }
        b_0.storeCoins(src.forward_ton_amount);
        b_0.storeBuilder(src.forward_payload.asBuilder());
    };
}
exports.storeTokenTransfer = storeTokenTransfer;
function loadTokenTransfer(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 260734629) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _amount = sc_0.loadCoins();
    let _destination = sc_0.loadAddress();
    let _response_destination = sc_0.loadAddress();
    let _custom_payload = sc_0.loadBit() ? sc_0.loadRef() : null;
    let _forward_ton_amount = sc_0.loadCoins();
    let _forward_payload = sc_0.asCell();
    return { $$type: 'TokenTransfer', queryId: _queryId, amount: _amount, destination: _destination, response_destination: _response_destination, custom_payload: _custom_payload, forward_ton_amount: _forward_ton_amount, forward_payload: _forward_payload };
}
exports.loadTokenTransfer = loadTokenTransfer;
function loadTupleTokenTransfer(source) {
    let _queryId = source.readBigNumber();
    let _amount = source.readBigNumber();
    let _destination = source.readAddress();
    let _response_destination = source.readAddress();
    let _custom_payload = source.readCellOpt();
    let _forward_ton_amount = source.readBigNumber();
    let _forward_payload = source.readCell();
    return { $$type: 'TokenTransfer', queryId: _queryId, amount: _amount, destination: _destination, response_destination: _response_destination, custom_payload: _custom_payload, forward_ton_amount: _forward_ton_amount, forward_payload: _forward_payload };
}
function storeTupleTokenTransfer(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.destination);
    builder.writeAddress(source.response_destination);
    builder.writeCell(source.custom_payload);
    builder.writeNumber(source.forward_ton_amount);
    builder.writeSlice(source.forward_payload);
    return builder.build();
}
function dictValueParserTokenTransfer() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenTransfer(src)).endCell());
        },
        parse: (src) => {
            return loadTokenTransfer(src.loadRef().beginParse());
        }
    };
}
function storeTokenTransferInternal(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(395134233, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.from);
        b_0.storeAddress(src.response_destination);
        b_0.storeCoins(src.forward_ton_amount);
        b_0.storeBuilder(src.forward_payload.asBuilder());
    };
}
exports.storeTokenTransferInternal = storeTokenTransferInternal;
function loadTokenTransferInternal(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 395134233) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _amount = sc_0.loadCoins();
    let _from = sc_0.loadAddress();
    let _response_destination = sc_0.loadAddress();
    let _forward_ton_amount = sc_0.loadCoins();
    let _forward_payload = sc_0.asCell();
    return { $$type: 'TokenTransferInternal', queryId: _queryId, amount: _amount, from: _from, response_destination: _response_destination, forward_ton_amount: _forward_ton_amount, forward_payload: _forward_payload };
}
exports.loadTokenTransferInternal = loadTokenTransferInternal;
function loadTupleTokenTransferInternal(source) {
    let _queryId = source.readBigNumber();
    let _amount = source.readBigNumber();
    let _from = source.readAddress();
    let _response_destination = source.readAddress();
    let _forward_ton_amount = source.readBigNumber();
    let _forward_payload = source.readCell();
    return { $$type: 'TokenTransferInternal', queryId: _queryId, amount: _amount, from: _from, response_destination: _response_destination, forward_ton_amount: _forward_ton_amount, forward_payload: _forward_payload };
}
function storeTupleTokenTransferInternal(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.from);
    builder.writeAddress(source.response_destination);
    builder.writeNumber(source.forward_ton_amount);
    builder.writeSlice(source.forward_payload);
    return builder.build();
}
function dictValueParserTokenTransferInternal() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenTransferInternal(src)).endCell());
        },
        parse: (src) => {
            return loadTokenTransferInternal(src.loadRef().beginParse());
        }
    };
}
function storeTokenNotification(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(1935855772, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.from);
        b_0.storeBuilder(src.forward_payload.asBuilder());
    };
}
exports.storeTokenNotification = storeTokenNotification;
function loadTokenNotification(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1935855772) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _amount = sc_0.loadCoins();
    let _from = sc_0.loadAddress();
    let _forward_payload = sc_0.asCell();
    return { $$type: 'TokenNotification', queryId: _queryId, amount: _amount, from: _from, forward_payload: _forward_payload };
}
exports.loadTokenNotification = loadTokenNotification;
function loadTupleTokenNotification(source) {
    let _queryId = source.readBigNumber();
    let _amount = source.readBigNumber();
    let _from = source.readAddress();
    let _forward_payload = source.readCell();
    return { $$type: 'TokenNotification', queryId: _queryId, amount: _amount, from: _from, forward_payload: _forward_payload };
}
function storeTupleTokenNotification(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.from);
    builder.writeSlice(source.forward_payload);
    return builder.build();
}
function dictValueParserTokenNotification() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenNotification(src)).endCell());
        },
        parse: (src) => {
            return loadTokenNotification(src.loadRef().beginParse());
        }
    };
}
function storeTokenBurn(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(1499400124, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.owner);
        b_0.storeAddress(src.response_destination);
    };
}
exports.storeTokenBurn = storeTokenBurn;
function loadTokenBurn(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1499400124) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _amount = sc_0.loadCoins();
    let _owner = sc_0.loadAddress();
    let _response_destination = sc_0.loadAddress();
    return { $$type: 'TokenBurn', queryId: _queryId, amount: _amount, owner: _owner, response_destination: _response_destination };
}
exports.loadTokenBurn = loadTokenBurn;
function loadTupleTokenBurn(source) {
    let _queryId = source.readBigNumber();
    let _amount = source.readBigNumber();
    let _owner = source.readAddress();
    let _response_destination = source.readAddress();
    return { $$type: 'TokenBurn', queryId: _queryId, amount: _amount, owner: _owner, response_destination: _response_destination };
}
function storeTupleTokenBurn(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.owner);
    builder.writeAddress(source.response_destination);
    return builder.build();
}
function dictValueParserTokenBurn() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenBurn(src)).endCell());
        },
        parse: (src) => {
            return loadTokenBurn(src.loadRef().beginParse());
        }
    };
}
function storeTokenBurnNotification(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(2078119902, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.owner);
        b_0.storeAddress(src.response_destination);
    };
}
exports.storeTokenBurnNotification = storeTokenBurnNotification;
function loadTokenBurnNotification(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2078119902) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _amount = sc_0.loadCoins();
    let _owner = sc_0.loadAddress();
    let _response_destination = sc_0.loadMaybeAddress();
    return { $$type: 'TokenBurnNotification', queryId: _queryId, amount: _amount, owner: _owner, response_destination: _response_destination };
}
exports.loadTokenBurnNotification = loadTokenBurnNotification;
function loadTupleTokenBurnNotification(source) {
    let _queryId = source.readBigNumber();
    let _amount = source.readBigNumber();
    let _owner = source.readAddress();
    let _response_destination = source.readAddressOpt();
    return { $$type: 'TokenBurnNotification', queryId: _queryId, amount: _amount, owner: _owner, response_destination: _response_destination };
}
function storeTupleTokenBurnNotification(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.owner);
    builder.writeAddress(source.response_destination);
    return builder.build();
}
function dictValueParserTokenBurnNotification() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenBurnNotification(src)).endCell());
        },
        parse: (src) => {
            return loadTokenBurnNotification(src.loadRef().beginParse());
        }
    };
}
function storeTokenExcesses(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(3576854235, 32);
        b_0.storeUint(src.queryId, 64);
    };
}
exports.storeTokenExcesses = storeTokenExcesses;
function loadTokenExcesses(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 3576854235) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'TokenExcesses', queryId: _queryId };
}
exports.loadTokenExcesses = loadTokenExcesses;
function loadTupleTokenExcesses(source) {
    let _queryId = source.readBigNumber();
    return { $$type: 'TokenExcesses', queryId: _queryId };
}
function storeTupleTokenExcesses(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}
function dictValueParserTokenExcesses() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenExcesses(src)).endCell());
        },
        parse: (src) => {
            return loadTokenExcesses(src.loadRef().beginParse());
        }
    };
}
function storeTokenUpdateContent(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(2937889386, 32);
        b_0.storeRef(src.content);
    };
}
exports.storeTokenUpdateContent = storeTokenUpdateContent;
function loadTokenUpdateContent(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2937889386) {
        throw Error('Invalid prefix');
    }
    let _content = sc_0.loadRef();
    return { $$type: 'TokenUpdateContent', content: _content };
}
exports.loadTokenUpdateContent = loadTokenUpdateContent;
function loadTupleTokenUpdateContent(source) {
    let _content = source.readCell();
    return { $$type: 'TokenUpdateContent', content: _content };
}
function storeTupleTokenUpdateContent(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeCell(source.content);
    return builder.build();
}
function dictValueParserTokenUpdateContent() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeTokenUpdateContent(src)).endCell());
        },
        parse: (src) => {
            return loadTokenUpdateContent(src.loadRef().beginParse());
        }
    };
}
function storeJettonWalletData(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeInt(src.balance, 257);
        b_0.storeAddress(src.owner);
        b_0.storeAddress(src.master);
        b_0.storeRef(src.walletCode);
    };
}
exports.storeJettonWalletData = storeJettonWalletData;
function loadJettonWalletData(slice) {
    let sc_0 = slice;
    let _balance = sc_0.loadIntBig(257);
    let _owner = sc_0.loadAddress();
    let _master = sc_0.loadAddress();
    let _walletCode = sc_0.loadRef();
    return { $$type: 'JettonWalletData', balance: _balance, owner: _owner, master: _master, walletCode: _walletCode };
}
exports.loadJettonWalletData = loadJettonWalletData;
function loadTupleJettonWalletData(source) {
    let _balance = source.readBigNumber();
    let _owner = source.readAddress();
    let _master = source.readAddress();
    let _walletCode = source.readCell();
    return { $$type: 'JettonWalletData', balance: _balance, owner: _owner, master: _master, walletCode: _walletCode };
}
function storeTupleJettonWalletData(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.balance);
    builder.writeAddress(source.owner);
    builder.writeAddress(source.master);
    builder.writeCell(source.walletCode);
    return builder.build();
}
function dictValueParserJettonWalletData() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeJettonWalletData(src)).endCell());
        },
        parse: (src) => {
            return loadJettonWalletData(src.loadRef().beginParse());
        }
    };
}
function storeDeploy(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(2490013878, 32);
        b_0.storeUint(src.queryId, 64);
    };
}
exports.storeDeploy = storeDeploy;
function loadDeploy(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2490013878) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'Deploy', queryId: _queryId };
}
exports.loadDeploy = loadDeploy;
function loadTupleDeploy(source) {
    let _queryId = source.readBigNumber();
    return { $$type: 'Deploy', queryId: _queryId };
}
function storeTupleDeploy(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}
function dictValueParserDeploy() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadDeploy(src.loadRef().beginParse());
        }
    };
}
function storeDeployOk(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(2952335191, 32);
        b_0.storeUint(src.queryId, 64);
    };
}
exports.storeDeployOk = storeDeployOk;
function loadDeployOk(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2952335191) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    return { $$type: 'DeployOk', queryId: _queryId };
}
exports.loadDeployOk = loadDeployOk;
function loadTupleDeployOk(source) {
    let _queryId = source.readBigNumber();
    return { $$type: 'DeployOk', queryId: _queryId };
}
function storeTupleDeployOk(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}
function dictValueParserDeployOk() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeDeployOk(src)).endCell());
        },
        parse: (src) => {
            return loadDeployOk(src.loadRef().beginParse());
        }
    };
}
function storeFactoryDeploy(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(1829761339, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.cashback);
    };
}
exports.storeFactoryDeploy = storeFactoryDeploy;
function loadFactoryDeploy(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 1829761339) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _cashback = sc_0.loadAddress();
    return { $$type: 'FactoryDeploy', queryId: _queryId, cashback: _cashback };
}
exports.loadFactoryDeploy = loadFactoryDeploy;
function loadTupleFactoryDeploy(source) {
    let _queryId = source.readBigNumber();
    let _cashback = source.readAddress();
    return { $$type: 'FactoryDeploy', queryId: _queryId, cashback: _cashback };
}
function storeTupleFactoryDeploy(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.cashback);
    return builder.build();
}
function dictValueParserFactoryDeploy() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeFactoryDeploy(src)).endCell());
        },
        parse: (src) => {
            return loadFactoryDeploy(src.loadRef().beginParse());
        }
    };
}
function storeChangeOwner(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(2174598809, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.newOwner);
    };
}
exports.storeChangeOwner = storeChangeOwner;
function loadChangeOwner(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 2174598809) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _newOwner = sc_0.loadAddress();
    return { $$type: 'ChangeOwner', queryId: _queryId, newOwner: _newOwner };
}
exports.loadChangeOwner = loadChangeOwner;
function loadTupleChangeOwner(source) {
    let _queryId = source.readBigNumber();
    let _newOwner = source.readAddress();
    return { $$type: 'ChangeOwner', queryId: _queryId, newOwner: _newOwner };
}
function storeTupleChangeOwner(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.newOwner);
    return builder.build();
}
function dictValueParserChangeOwner() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeChangeOwner(src)).endCell());
        },
        parse: (src) => {
            return loadChangeOwner(src.loadRef().beginParse());
        }
    };
}
function storeChangeOwnerOk(src) {
    return (builder) => {
        let b_0 = builder;
        b_0.storeUint(846932810, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.newOwner);
    };
}
exports.storeChangeOwnerOk = storeChangeOwnerOk;
function loadChangeOwnerOk(slice) {
    let sc_0 = slice;
    if (sc_0.loadUint(32) !== 846932810) {
        throw Error('Invalid prefix');
    }
    let _queryId = sc_0.loadUintBig(64);
    let _newOwner = sc_0.loadAddress();
    return { $$type: 'ChangeOwnerOk', queryId: _queryId, newOwner: _newOwner };
}
exports.loadChangeOwnerOk = loadChangeOwnerOk;
function loadTupleChangeOwnerOk(source) {
    let _queryId = source.readBigNumber();
    let _newOwner = source.readAddress();
    return { $$type: 'ChangeOwnerOk', queryId: _queryId, newOwner: _newOwner };
}
function storeTupleChangeOwnerOk(source) {
    let builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.newOwner);
    return builder.build();
}
function dictValueParserChangeOwnerOk() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef((0, core_1.beginCell)().store(storeChangeOwnerOk(src)).endCell());
        },
        parse: (src) => {
            return loadChangeOwnerOk(src.loadRef().beginParse());
        }
    };
}
function initTest_init_args(src) {
    return (builder) => {
        let b_0 = builder;
    };
}
async function Test_init() {
    const __code = core_1.Cell.fromBase64('');
    const __system = core_1.Cell.fromBase64('');
    let builder = (0, core_1.beginCell)();
    builder.storeRef(__system);
    builder.storeUint(0, 1);
    initTest_init_args({ $$type: 'Test_init_args' })(builder);
    const __data = builder.endCell();
    return { code: __code, data: __data };
}
const Test_errors = {
    2: { message: `Stack undeflow` },
    3: { message: `Stack overflow` },
    4: { message: `Integer overflow` },
    5: { message: `Integer out of expected range` },
    6: { message: `Invalid opcode` },
    7: { message: `Type check error` },
    8: { message: `Cell overflow` },
    9: { message: `Cell underflow` },
    10: { message: `Dictionary error` },
    13: { message: `Out of gas error` },
    32: { message: `Method ID not found` },
    34: { message: `Action is invalid or not supported` },
    37: { message: `Not enough TON` },
    38: { message: `Not enough extra-currencies` },
    128: { message: `Null reference exception` },
    129: { message: `Invalid serialization prefix` },
    130: { message: `Invalid incoming message` },
    131: { message: `Constraints error` },
    132: { message: `Access denied` },
    133: { message: `Contract stopped` },
    134: { message: `Invalid argument` },
    135: { message: `Code of a contract was not found` },
    136: { message: `Invalid address` },
    137: { message: `Masterchain support is not enabled for this contract` },
    3734: { message: `Not Owner` },
    4159: { message: `Invalid value!!` },
    4429: { message: `Invalid sender` },
    6898: { message: `The total supply will be overlapping.` },
    13650: { message: `Invalid bounced message` },
    18668: { message: `Can't Mint Anymore` },
    31733: { message: `condition can\`t be...` },
    42708: { message: `Invalid sender!` },
    43422: { message: `Invalid value - Burn` },
    62972: { message: `Invalid balance` },
};
const Test_types = [
    { "name": "StateInit", "header": null, "fields": [{ "name": "code", "type": { "kind": "simple", "type": "cell", "optional": false } }, { "name": "data", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "Context", "header": null, "fields": [{ "name": "bounced", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "sender", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "value", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "raw", "type": { "kind": "simple", "type": "slice", "optional": false } }] },
    { "name": "SendParameters", "header": null, "fields": [{ "name": "bounce", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "to", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "value", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "mode", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "body", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "code", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "data", "type": { "kind": "simple", "type": "cell", "optional": true } }] },
    { "name": "TokenInfo", "header": null, "fields": [{ "name": "ticker", "type": { "kind": "simple", "type": "string", "optional": false } }, { "name": "decimals", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }] },
    { "name": "Replace", "header": 1384510466, "fields": [{ "name": "items", "type": { "kind": "dict", "key": "int", "value": "address" } }] },
    { "name": "Mint", "header": 4235234258, "fields": [{ "name": "amount", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "receiver", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "JettonData", "header": null, "fields": [{ "name": "totalSupply", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "mintable", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "content", "type": { "kind": "simple", "type": "cell", "optional": false } }, { "name": "walletCode", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "TokenTransfer", "header": 260734629, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "destination", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "response_destination", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "custom_payload", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "forward_ton_amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "forward_payload", "type": { "kind": "simple", "type": "slice", "optional": false, "format": "remainder" } }] },
    { "name": "TokenTransferInternal", "header": 395134233, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "from", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "response_destination", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "forward_ton_amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "forward_payload", "type": { "kind": "simple", "type": "slice", "optional": false, "format": "remainder" } }] },
    { "name": "TokenNotification", "header": 1935855772, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "from", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "forward_payload", "type": { "kind": "simple", "type": "slice", "optional": false, "format": "remainder" } }] },
    { "name": "TokenBurn", "header": 1499400124, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "response_destination", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "TokenBurnNotification", "header": 2078119902, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "response_destination", "type": { "kind": "simple", "type": "address", "optional": true } }] },
    { "name": "TokenExcesses", "header": 3576854235, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "TokenUpdateContent", "header": 2937889386, "fields": [{ "name": "content", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "JettonWalletData", "header": null, "fields": [{ "name": "balance", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "master", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "walletCode", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "Deploy", "header": 2490013878, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "DeployOk", "header": 2952335191, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "FactoryDeploy", "header": 1829761339, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "cashback", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "ChangeOwner", "header": 2174598809, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "newOwner", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "ChangeOwnerOk", "header": 846932810, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "newOwner", "type": { "kind": "simple", "type": "address", "optional": false } }] },
];
const Test_getters = [
    { "name": "getTest0", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest1", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest2", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest3", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest4", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest5", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest6", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest7", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest8", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest9", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest10", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest11", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest12", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest13", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest14", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest15", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest16", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest17", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest18", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest19", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest20", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest21", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest22", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest23", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest24", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest25", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest26", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest27", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest28", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest29", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest30", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest31", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest32", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest33", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest34", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest35", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest36", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest37", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest38", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest39", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest40", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest41", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest42", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest43", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest44", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest45", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest46", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest47", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest48", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest49", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest50", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest51", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest52", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest53", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest54", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest55", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest56", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest57", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest58", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest59", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest60", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest61", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest62", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest63", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest64", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest65", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest66", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest67", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest68", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest69", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest70", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest71", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest72", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest73", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest74", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
    { "name": "getTest75", "arguments": [{ "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }], "returnType": { "kind": "simple", "type": "int", "optional": true, "format": 257 } },
];
const Test_receivers = [];
class Test {
    static async init() {
        return await Test_init();
    }
    static async fromInit() {
        const init = await Test_init();
        const address = (0, core_1.contractAddress)(0, init);
        return new Test(address, init);
    }
    static fromAddress(address) {
        return new Test(address);
    }
    address;
    init;
    abi = {
        types: Test_types,
        getters: Test_getters,
        receivers: Test_receivers,
        errors: Test_errors,
    };
    constructor(address, init) {
        this.address = address;
        this.init = init;
    }
    async getGetTest0(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest0', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest1(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest1', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest2(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest2', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest3(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest3', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest4(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest4', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest5(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest5', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest6(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest6', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest7(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest7', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest8(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest8', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest9(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest9', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest10(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest10', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest11(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest11', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest12(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest12', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest13(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest13', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest14(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest14', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest15(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest15', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest16(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest16', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest17(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest17', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest18(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest18', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest19(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest19', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest20(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest20', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest21(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest21', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest22(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest22', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest23(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest23', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest24(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest24', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest25(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest25', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest26(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest26', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest27(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest27', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest28(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest28', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest29(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest29', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest30(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest30', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest31(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest31', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest32(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest32', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest33(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest33', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest34(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest34', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest35(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest35', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest36(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest36', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest37(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest37', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest38(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest38', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest39(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest39', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest40(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest40', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest41(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest41', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest42(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest42', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest43(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest43', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest44(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest44', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest45(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest45', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest46(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest46', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest47(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest47', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest48(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest48', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest49(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest49', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest50(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest50', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest51(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest51', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest52(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest52', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest53(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest53', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest54(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest54', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest55(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest55', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest56(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest56', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest57(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest57', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest58(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest58', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest59(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest59', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest60(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest60', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest61(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest61', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest62(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest62', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest63(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest63', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest64(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest64', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest65(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest65', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest66(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest66', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest67(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest67', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest68(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest68', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest69(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest69', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest70(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest70', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest71(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest71', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest72(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest72', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest73(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest73', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest74(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest74', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
    async getGetTest75(provider, index) {
        let builder = new core_1.TupleBuilder();
        builder.writeNumber(index);
        let source = (await provider.get('getTest75', builder.build())).stack;
        let result = source.readBigNumberOpt();
        return result;
    }
}
exports.Test = Test;
